<<<<<<< HEAD
//////////////////////////////////////////////////
//
//  Script pro návesti Ceských Drah verze 2.2
//
//  Jirí Polák jiripolak@volny.cz
//
//  Modely návestidel: Jirí Polák jiripolak@volny.cz
//
//////////////////////////////////////////////////

SCRIPT MEZIN

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) ) 
	state = 0;
	else state = next_nor;


SCRIPT MEZII

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( block_state () !=# 0 ||
		( next_nor != next_inf && next_inf ==# 1 ) )
	state = 1;
	else state = 7;
	

SCRIPT PREDNORM

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;


SCRIPT PRED4/8

	extern float	this_sig_lr ();
	extern float	next_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			this_nor;
	float			next_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( this_nor ==# 0 || this_nor ==# 1 )
	state = 0;
	else if ( next_nor ==# 0 || next_nor ==# 1 ||
		( sig_feature (SIGFEAT_USER3) &&
		( next_nor ==# 2 || next_nor ># 4 ) ) )
	state = 2;
	else if ( next_nor ==# 2 )
	state = 7;
	else state = next_nor;

	draw_state = def_draw_state (state);


SCRIPT PRED6/10

	extern float	this_sig_lr ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 6 )
	draw_state = 0;
	else if ( this_dis ==# 4 )
	draw_state = 1;
	else draw_state = 2;



SCRIPT OPRED4/8

	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	state = next_nor;
	if ( next_nor ==# 0 || next_nor ==# 1 )
	draw_state = 3;
	else if ( next_nor ==# 3 )
	draw_state = 2;
	else if ( next_nor ==# 4 )
	draw_state = 4;
	else if ( next_nor ==# 5 )
	draw_state = 1;
	else if ( next_nor ==# 6 )
	draw_state = 4;
	else draw_state = 0;


SCRIPT PREDOPK

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 0 || this_dis ==# 7 )
	draw_state = 2;
	else if ( sig_feature (SIGFEAT_USER3) )
	draw_state = 0;
	else draw_state = 1;


SCRIPT PREDOPT

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 0 || this_dis ==# 7 )
	draw_state = 1;
	else draw_state = 0;


SCRIPT PREDOPZ

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 0 || this_dis ==# 7 )
	draw_state = 1;
	else draw_state = 0;


SCRIPT PREDOP6

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 0 || this_dis ==# 7 )
	draw_state = 1;
	else draw_state = 0;


SCRIPT PREDAB4/8

	extern float	this_sig_lr ();
	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			this_nor;
	float			next_nor;
	float			next_dis;
	float			next_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_dis = next_sig_lr (SIGFN_DISTANCE);
	next_rep = next_sig_lr (SIGFN_REPEATER);

	if ( this_nor ==# 0 || this_nor ==# 1 )
	state = 0;
	else if ( next_rep ==# 2 )
	state = next_dis;
	else
	{ 
		if ( next_nor ==# 0 || next_nor ==# 1 )
		state = 2;
		else if ( next_nor ==# 2 )
		state = 7;
		else state = next_nor;
	}
	

	draw_state = def_draw_state (state);


SCRIPT AB4OP

	extern float	this_sig_lr ();
	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			this_nor;
	float			next_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( this_nor ==# 0 || next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;

	draw_state = def_draw_state (state);


SCRIPT SKRYTA

	extern float	block_state ();
	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( block_state () ==# 2 )
	state = 0;
	else state = next_nor;

	draw_state = def_draw_state (state);


SCRIPT N160

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	this_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	float			this_dis;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else if ( sig_feature (SIGFEAT_USER2) ||
		( ( this_dis !=# -1 && next_nor !=# 7 ) &&
		next_nor !=# 2 ) || ( sig_feature (SIGFEAT_USER3) &&
		( next_nor ==# 2 || next_nor ># 4 ) ) )
	state = 2;
      else state = 7;

	draw_state = def_draw_state (state);


SCRIPT NM160

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER2) )
	state = 2;
	else if ( next_nor ==# 0 )
	state = 3;
	else state = 7;

	draw_state = def_draw_state (state);


SCRIPT N120SI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 6;

	draw_state = def_draw_state (state);


SCRIPT N100

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 6;

	draw_state = def_draw_state (state);


SCRIPT N80

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 5;

	draw_state = def_draw_state (state);


SCRIPT N60

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 4;

	draw_state = def_draw_state (state);


SCRIPT N50SI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N50BI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N40

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N30SI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N30BI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N30XX

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT NPP

	extern float	enabled;
	extern float	route_set ();
	extern float	block_state ();
	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else state = 1;

	draw_state = def_draw_state (state);


SCRIPT VLOZPOV

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( !enabled || !route_set () ||
		next_nor ==# 0 ||	block_state () !=# 0 )
	state = 0;
	else if ( next_nor ==# 1 )
	state = 1;
	else state = 7;

	draw_state = def_draw_state (state);


SCRIPT VLOZPOS

	extern float	enabled;
	extern float	route_set ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	if ( !enabled || !route_set () || block_state () ==# 2 ||
		( block_state () !=# 0 && !sig_feature (SIGFEAT_USER4) ) )
	state = 0;
	else state = 1;

	draw_state = def_draw_state (state);


SCRIPT ABLOK

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( block_state () !=# 0 )
	state = 0;
	else if ( next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;

	draw_state = def_draw_state (state);


SCRIPT A4BLOK

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_rep;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_rep = next_sig_lr (SIGFN_REPEATER);

	if ( block_state () !=# 0 )
	state = 0;
	else if ( next_nor ==# 2 && next_rep ==# 2 )
	state = 2;
	else if ( next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;

	draw_state = def_draw_state (state);


SCRIPT NSTUJ

	extern float	state;
	extern float	draw_state;

	state = 0;
	draw_state = 0;


SCRIPT STURC

	extern float	state;
	extern float	draw_state;

	state = 0;
	draw_state = 0;


SCRIPT POSUN

	extern float	enabled;
	extern float	route_set ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	if ( !enabled || !route_set () || block_state () ==# 2 ||
		( block_state () !=# 0 && !sig_feature (SIGFEAT_USER4) ) )
	state = 0;
	else state = 1;

	draw_state = def_draw_state (state);


SCRIPT NAV9A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_rep;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_rep = this_sig_lr (SIGFN_REPEATER);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_rep ==# -1 )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_rep ==# -1 )
			draw_state = 2;
			else draw_state = 3;
		}
		else
		{
			if ( this_rep ==# -1 )
			draw_state = 4;
			else draw_state = 5;
		}
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 15;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 6;
		else draw_state = 7;
	}
	else if ( this_nor ==# 4 )
	{
		if ( this_dis !=# -1 )
		draw_state = 8;
		else draw_state = 9;
	}
	else if ( this_nor ==# 5 )
	{
		if ( this_dis !=# -1 )
		draw_state = 10;
		else draw_state = 11;
	}
	else if ( this_nor ==# 6 )
	{
		if ( this_dis !=# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 14;
		else draw_state = 15;
	}
	else
	{
		state = 8;
		draw_state = 15;
	}


SCRIPT NAV7A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_rep;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_rep = this_sig_lr (SIGFN_REPEATER);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_rep ==# -1 )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_rep ==# -1 )
			draw_state = 2;
			else draw_state = 3;
		}
		else
		{
			if ( this_rep ==# -1 )
			draw_state = 4;
			else draw_state = 5;
		}
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 15;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 6;
		else draw_state = 7;
	}
	else if ( this_nor ==# 4 )
	{
		if ( this_dis !=# -1 )
		draw_state = 8;
		else draw_state = 9;
	}
	else if ( this_nor ==# 5 )
	{
		if ( this_dis !=# -1 )
		draw_state = 10;
		else draw_state = 11;
	}
	else if ( this_nor ==# 6 )
	{
		if ( this_dis !=# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 14;
		else draw_state = 15;
	}
	else
	{
		state = 8;
		draw_state = 15;
	}


SCRIPT NAV7R

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_rep;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_rep = this_sig_lr (SIGFN_REPEATER);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_rep ==# -1 )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_rep ==# -1 )
			draw_state = 2;
			else draw_state = 3;
		}
		else
		{
			if ( this_rep ==# -1 )
			draw_state = 4;
			else draw_state = 5;
		}
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 15;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 6;
		else draw_state = 7;
	}
	else if ( this_nor ==# 4 )
	{
		if ( this_dis !=# -1 )
		draw_state = 8;
		else draw_state = 9;
	}
	else if ( this_nor ==# 5 )
	{
		if ( this_dis !=# -1 )
		draw_state = 10;
		else draw_state = 11;
	}
	else if ( this_nor ==# 6 )
	{
		if ( this_dis !=# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 14;
		else draw_state = 15;
	}
	else
	{
		state = 8;
		draw_state = 15;
	}


SCRIPT NAV6A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_rep;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_rep = this_sig_lr (SIGFN_REPEATER);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 6;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 3;
		else draw_state = 4;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 5;
		else draw_state = 6;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV6R

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 6;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis ==# -1 )
		draw_state = 4;
		else draw_state = 3;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 5;
		else draw_state = 6;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV5T

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 6;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 3;
		else draw_state = 4;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 5;
		else draw_state = 6;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV5Z

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 6;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 3;
		else draw_state = 4;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 5;
		else draw_state = 6;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV4A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_dis ==# -1 || ( this_rep ==# -1 &&
			this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
		draw_state = 0;
		else if ( this_rep ==# -1 || sig_feature (SIGFEAT_USER3) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
				draw_state = 4;
			else
			{
				if ( this_rep ==# -1 )
				draw_state = 5;
				else if ( sig_feature (SIGFEAT_USER3) )
				draw_state = 3;
				else draw_state = 4;
			}
		}	
		else
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
				draw_state = 9;
			else
			{
				if ( this_rep ==# -1 )
				draw_state = 8;
				else if ( sig_feature (SIGFEAT_USER3) )
				draw_state = 6;
				else draw_state = 7;
			}
		}	
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 13;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis ==# -1 )
		draw_state = 11;
		else if ( this_rep ==# -1 || sig_feature (SIGFEAT_USER3) )
		draw_state = 10;
		else draw_state = 13;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else
	{
		state = 8;
		draw_state = 13;
	}


SCRIPT NAV4_2A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_dis ==# -1 || ( this_rep ==# -1
			&& this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
			draw_state = 2;
			else draw_state = 3;
		}	
		else
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
			draw_state = 4;
			else draw_state = 5;
		}	
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 15;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis ==# -1 )
		draw_state = 7;
		else draw_state = 6;
	}	
	else if ( this_nor ==# 4 )
	{
		if ( this_dis ==# -1 )
		draw_state = 9;
		else draw_state = 8;
	}	
	else if ( this_nor ==# 5 )
	{
		if ( this_dis ==# -1 )
		draw_state = 11;
		else draw_state = 10;
	}	
	else if ( this_nor ==# 6 )
	{
		if ( this_dis ==# -1 )
		draw_state = 13;
		else draw_state = 12;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 14;
		else draw_state = 15;
	}
	else
	{
		state = 8;
		draw_state = 15;
	}


SCRIPT NAV4R

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_dis ==# -1 || ( this_rep ==# -1 &&
			this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
		draw_state = 0;
		else if ( this_rep ==# -1 || sig_feature (SIGFEAT_USER3) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
				draw_state = 4;
			else
			{
				if ( this_rep ==# -1 )
				draw_state = 5;
				else if ( sig_feature (SIGFEAT_USER3) )
				draw_state = 3;
				else draw_state = 4;
			}
		}	
		else
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
				draw_state = 9;
			else
			{
				if ( this_rep ==# -1 )
				draw_state = 8;
				else if ( sig_feature (SIGFEAT_USER3) )
				draw_state = 6;
				else draw_state = 7;
			}
		}	
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 13;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis ==# -1 )
		draw_state = 11;
		else if ( this_rep ==# -1 || sig_feature (SIGFEAT_USER3) )
		draw_state = 10;
		else draw_state = 13;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else
	{
		state = 8;
		draw_state = 13;
	}


SCRIPT NAV4T

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || sig_feature (SIGFEAT_USER3) )
				draw_state = 1;
				else draw_state = 2;
		}	
		else
		{
			if ( this_dis ==# -1 || sig_feature (SIGFEAT_USER3) )
				draw_state = 3;
				else draw_state = 4;
		}	
	}
	else if ( this_nor ==# 2 )
	{
		if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 8;
		else draw_state = 10;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 5;
		else if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 6;
		else draw_state = 7;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis !=# -1 )
		draw_state = 10;
		else if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 8;
		else draw_state = 9;
	}
	else
	{
		state = 8;
		draw_state = 10;
	}


SCRIPT NAV3

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_dis ==# -1 || ( this_rep ==# -1 &&
			sig_feature (SIGFEAT_USER3) ) )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				sig_feature (SIGFEAT_USER3) ) )
			draw_state = 3;
			else draw_state = 2;
		}	
		else
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				sig_feature (SIGFEAT_USER3) ) )
			draw_state = 5;
			else draw_state = 4;
		}	
	}
	else if ( this_nor ==# 2 )
	{
		if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 9;
		else draw_state = 11;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 6;
		else if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 7;
		else draw_state = 8;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis !=# -1 )
		draw_state = 11;
		else if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 9;
		else draw_state = 10;
	}
	else
	{
		state = 8;
		draw_state = 11;
	}


SCRIPT NAV2A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( sig_feature (SIGFEAT_USER1) )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 2;
		else draw_state = 3;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 4;
	}
	else if ( this_nor ==# 7 )
	{
		draw_state = 5;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV2R

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 3;
	}
	else if ( this_nor ==# 7 )
	{
		draw_state = 4;
	}
	else
	{
		state = 8;
		draw_state = 5;
	}


SCRIPT NAVVLOZ

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( sig_feature (SIGFEAT_USER3) )
		draw_state = 1;
		else draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		draw_state = 3;
	}
	else if ( this_nor ==# 7 )
	{
		draw_state = 2;
	}
	else
	{
		state = 8;
		draw_state = 4;
	}


SCRIPT PREDMECH

	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;

	draw_state = def_draw_state (state);


SCRIPT MECHRA1

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		draw_state = 3;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 1;
	}
	else if ( this_nor ==# 3 )
	{
		if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 1;
		else draw_state = 2;
	}	
	else if ( this_nor ==# 7 )
	{
		draw_state = 2;
	}
	else
	{
		state = 8;
		draw_state = 4;
	}


SCRIPT MECHRA2

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	if ( this_sig_lr (SIGFN_NORMAL) ==# 3 )
	{
		if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 1;
		else draw_state = 2;
	}	
	else	draw_state = 0;


SCRIPT POSSV

	extern float	this_sig_lr ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		draw_state = 1;
	}
	else
	{
		state = 8;
		draw_state = 2;
	}


SCRIPT POSME

	extern float	this_sig_lr ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		draw_state = 1;
	}
	else
	{
		state = 8;
		draw_state = 2;
	}


SCRIPT VYHNAV

	extern float	route_set ();
	extern float	draw_state;

	if ( route_set () )
	draw_state = 1;
	else draw_state = 0;


SCRIPT VYHZAV

	extern float	route_set ();
	extern float	draw_state;

	if ( route_set () )
	draw_state = 1;
	else draw_state = 0;


SCRIPT VYHANG

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () !=# 2 )
	draw_state = 0;
	else draw_state = 1;


SCRIPT VYKOL

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () ==# 2 )
	draw_state = 0;
	else draw_state = 1;


SCRIPT VYKNAV

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () ==# 2 )
	draw_state = 0;
	else draw_state = 1;


SCRIPT INDO

	extern float	this_sig_lr ();
	extern float	route_set ();
	extern float	draw_state;

	if ( !route_set () || this_sig_lr (SIGFN_NORMAL) ==# 0 )
	draw_state = 1;
	else draw_state = 0;


SCRIPT INDP

	extern float	this_sig_lr ();
	extern float	route_set ();
	extern float	draw_state;

	if ( !route_set () || this_sig_lr (SIGFN_NORMAL) ==# 0 )
	draw_state = 1;
	else draw_state = 0;




































///////////////////////////////////////////////////////////////////////////////
//
// Signal Type Logic Scripts
// for Microsoft Train Simulator
//
///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2003-2007 Timas S. Adamaitis
// All rights reserved
//
// Mailto: boxplace@yandex.ru
//
///////////////////////////////////////////////////////////////////////////////
//
// 3-light signals
//
// Stop - Cab White
// Stop_And_Proceed - Red 0
// Restricting - White (Shunter or Welcome) 20 or 25
// Approach_1 - Yellow 60
// Approach_2 - Two Yellow, Two Yellow with Flashing 40
// Approach_3 - Two Yellow with Green Bar 60
// Clear_1 - Other signals with Green Bar 80
// Clear_2 - Green, Green Flashing, Yellow Flashing
//
///////////////////////////////////////////////////////////////////////////////
//
// 4-light signals
//
// Stop - Cab White
// Stop_And_Proceed - Red 0
// Restricting - White (Shunter or Welcome) 25
// Approach_1 - Yellow 40
// Approach_2 - Two Yellow, Two Yellow with Flashing 40
// Approach_3 - Two Yellow with Green Bar 60
// Clear_1 - Other signals with Green Bar 80
// Clear_2 - Green, Green Flashing, Yellow Flashing, YellowGreen
//
///////////////////////////////////////////////////////////////////////////////

SCRIPT T_Stop_W

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_RESTRICTING;
	draw_state = def_draw_state (state);

SCRIPT T_Stop_R

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	draw_state = def_draw_state (state);

SCRIPT T_Signal_V

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_CLEAR_2;
	draw_state = def_draw_state (state);

SCRIPT T_Always_R

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP;
	if (enabled)
	{
		state = SIGASP_STOP_AND_PROCEED;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Always_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_CLEAR_2;
	draw_state = def_draw_state (state);

SCRIPT T_Head_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	next_state = next_sig_lr (SIGFN_NORMAL);
	if (next_state ># SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	next_state = next_sig_lr (SIGFN_NORMAL);
	if (next_state ># SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_GR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_STOP)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_GR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_WGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_WGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_GR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_GR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Gxx_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_GxG_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	next_state = next_sig_lr (SIGFN_NORMAL);
	if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
	}
	draw_state = def_draw_state (state);
	if (state >=# SIGASP_APPROACH_1)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 3;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 4;
		}
	}

SCRIPT T_Head_YRY

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_APPROACH_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_YRY

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_APPROACH_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_xR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YR_Gx_N

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = def_draw_state (state);
		if (enabled)
		{
			state = SIGASP_RESTRICTING;
			draw_state = def_draw_state (state);
			if (sig_feature (SIGFEAT_USER1))
			{
				draw_state = 3;
			}
			else if (sig_feature (SIGFEAT_USER2))
			{
				draw_state = 4;
			}
			else if (sig_feature (SIGFEAT_USER3))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_WRW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);
	if ((state ==# SIGASP_RESTRICTING) && (block_state() ==# BLOCK_CLEAR))
	{
		draw_state = 2;
	}

SCRIPT T_Small_WRW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);
	if ((state ==# SIGASP_RESTRICTING) && (block_state() ==# BLOCK_CLEAR))
	{
		draw_state = 2;
	}

SCRIPT T_Head_WBW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);
	if ((state ==# SIGASP_RESTRICTING) && (block_state() ==# BLOCK_CLEAR))
	{
		draw_state = 2;
	}

SCRIPT T_Small_WBW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);
	if ((state ==# SIGASP_RESTRICTING) && (block_state() ==# BLOCK_CLEAR))
	{
		draw_state = 2;
	}

SCRIPT T_Head_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if ((enabled || !sig_feature (SIGFEAT_USER1)) && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Back

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else if (next_state ==# SIGASP_STOP )
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YG_R

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YG_RW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_xxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGx_RxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yx_RW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_xxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yxx_RxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yx_RY_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_xGR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_xGR_xG_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YxR_Yx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Yx_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Yx_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YG_RY_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YG_RY_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yx_RY_x_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yx_RY_xx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_xGR_xG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YxR_Yx_x_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_Yx_xx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_YxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Yxx_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Yxx_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxY_RY

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		else
		{
			state = SIGASP_APPROACH_2;
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_APPROACH_2)
		{
			if (block_state() !=# BLOCK_CLEAR)
			{
				draw_state = 5;
			}
			else if (next_state ># SIGASP_RESTRICTING)
			{
				draw_state = 3;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxY_RxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxY_Rx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGx_R

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}

SCRIPT T_Small_GR_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YGW_Rx

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YxW_Rx

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YGx_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YxY_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_GYx_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_GxG_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YRG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if ((enabled || !sig_feature (SIGFEAT_USER1)) && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YR_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_W

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_xxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YR_xY_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_xRG_WG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_xRG_xG_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YRx_xYW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_xY_x_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_xY_xx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xYx_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_2;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xYx_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_2;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xY_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_2;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xY_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_2;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_YxY

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		else
		{
			state = SIGASP_APPROACH_2;
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_APPROACH_2)
		{
			if (block_state() !=# BLOCK_CLEAR)
			{
				draw_state = 5;
			}
			else if (next_state ># SIGASP_RESTRICTING)
			{
				draw_state = 3;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_Yxx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YRG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_1)
		{
			draw_state = 2;
		}
		else if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 5;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 6;
		}
	}

SCRIPT T_Small_YxG_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_1)
		{
			draw_state = 2;
		}
		else if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 5;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 6;
		}
	}

SCRIPT T_Small_xRx_YWG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YRY_xWx

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_GRG_xWx

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_Left

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_Right

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_-

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_1

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_2

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_3

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_4

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_5

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_6

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_7

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_8

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_9

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_0

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_10

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_Left

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_Right

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_-

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_1

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_2

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_3

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_4

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_5

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_6

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_7

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_8

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_9

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_0

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_10

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Route

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_CLEAR_2;
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_WGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_GR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_YG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	next_state = next_sig_lr (SIGFN_NORMAL);
	if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
	}
	draw_state = def_draw_state (state);
	if (state >=# SIGASP_APPROACH_1)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 3;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 4;
		}
	}

SCRIPT T_Head_PS45_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if ((enabled || !sig_feature (SIGFEAT_USER1)) && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}

SCRIPT T_Head_PS45_YGR_W

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 6;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_PS45_YxR_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 4;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_PS45_xGR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_PS45_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_PS45_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_PS45_WGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_PS45_GR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_PS45_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}

SCRIPT T_Tunnel_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Tunnel_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Tunnel_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}
	else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
	{
		draw_state = 3;
	}

SCRIPT T_Tunnel_YRG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_1)
		{
			draw_state = 2;
		}
		else if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 5;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 6;
		}
	}
	else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
	{
		draw_state = 7;
	}

SCRIPT T_Tunnel_YG_RW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 6;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_Yx_RW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 7;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YGR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 6;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YxR_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 4;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YxR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YRG_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 7;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YRx_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 4;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YRx_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YGR_Repeater

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}
	else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
	{
		draw_state = 3;
	}

SCRIPT T_Tunnel_YRG_Repeater

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_1)
		{
			draw_state = 2;
		}
		else if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 5;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 6;
		}
	}
	else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
	{
		draw_state = 7;
	}










































//------------------------------------------------------------
//
// Created by SigMexx V1.4.3
//
// contains following scripts:
//	- Alak_Bejelz
//	- Alak_E11
//	- Alak_E12
//	- Alak_E21
//	- Alak_E22
//	- Alak_F11
//	- Alak_F21
//	- Alak_Kijelz
//	- Elojelzo
//	- Indikator80
//	- Terkoz
//	- 3f_AT_cs
//	- 3F_Max40Hi_cs
//	- 4f_Max40Hi_cs
//	- 0F_INFO
//	- 0F_BEALLITO
//	- 0F_TH
//	- 0F_VZ
//	- AS
//	- AS2
//	- ALAK_E
//	- BK_Vr_DB_2Flg_1
//	- BK_Vr_DB_2Flg_2
//	- ALAK_F1
//	- ALAK_F1NB
//	- ALAK_F2A
//	- ALAK_F2B
//	- 0F_FELOLDO
//	- 1F_T
//	- 1F_VT
//	- 1F_H
//	- 2f_At
//	- 2F_TT
//	- 2F_TT_Ru
//	- 2F_T
//	- 2F_TNB
//	- 2F_E
//	- 2F_ENB
//	- 2FS
//	- 2FS_NB
//	- 2F
//	- 3F_Max40Hi_71_kij
//	- 2F_Hi
//	- 3F_AT
//	- 3FK_AT
//	- 3F_IT_A
//	- 3F_IT_B
//	- 3F_FIT
//	- 3F_Max40Hi
//	- 3F_Max40Hi_71_sarga
//	- 3F_Max40
//	- 3F_Max40HiT
//	- 3F_Max80Hi
//	- 3FS_Max40Hi
//	- 3FS_Max4015
//	- 3FSK_Max40Hi
//	- 3FS_Max40HiT
//	- 4F_I
//	- 4F_I_Ru
//	- 4FJelR_ISM
//	- 4F_AT
//	- 4FR_AT
//	- 4F_IT_A
//	- 4F_IT_B
//	- 4F_FIT
//	- 4F_Max40
//	- 4F_Max40Hi
//	- 4F_Max40HiVO
//	- 4F_Max40HiT
//	- 2F_T_ru
//	- 2F_Ru
//	- 2F_E_Ru
//	- 3F_Max40Hi_Ru
//	- 4F_Max40HiT_ru
//	- 4FR_Max40Hi
//	- 4F_Max8040Hi
//	- 4F_Max8040HiT
//	- 4F_Max40HiSi
//	- 4F_Max40HiSiT
//	- 4F_Max12040Hi
//	- 4F_Max12040HiVO
//	- 4F_Max1208040HiVO
//	- 3F_GYVZ_120
//	- 4F_GYVZ_120
//	- INFO_Max
//	- INFO_120
//	- INFO_80
//	- INFO_40
//	- INFO_SHUNT
//	- INFO_HIVO
//	- VALTO_HM
//	- VALTO_HM_I
//	- VALTO_HM_I2
//	- VS_I
//	- VS
//	- 2F_TT_F
//	- 2F_TT_RuF
//	- ASF
//	- Alak_TNB
//	- 4F_Max40_KT
//	- 2f_Janus_A
//	- 3f_Janus_A
//	- 2F_Elojelzo
//	- 2f_Janus_B
//	- 3f_Janus_B

//------------------------------------------------------------
SCRIPT Alak_Bejelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;

	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 &&
		!sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_CLEAR_1;
	else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
		state = SIGASP_APPROACH_3;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT Alak_E11

	extern float next_sig_lr();
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E12

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;

	if ((this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1
	)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E21

	extern float next_sig_lr();
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E22

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;

	if ((this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_F11

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		draw_state = 0;
	else
		draw_state = 1;

//------------------------------------------------------------
SCRIPT Alak_F21

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_Kijelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;

	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2)))
	)
		state = SIGASP_CLEAR_1;
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	)
		state = SIGASP_APPROACH_3;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT Elojelzo

	extern float block_state();
	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;

	state = SIGASP_CLEAR_1;
	if (enabled && block_state() ==# BLOCK_CLEAR)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else
			state = SIGASP_STOP;
	}
	else if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT Indikator80

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Terkoz

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float state;
	extern float enabled;

	state = SIGASP_STOP;
	if (block_state() ==# BLOCK_CLEAR &&
		enabled &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_CLEAR_1;
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else
			state = SIGASP_STOP;
	}
	else if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 3f_AT_cs

	extern float block_state();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (enabled)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			draw_state = 3;
	}
	else
	{
		state = SIGASP_STOP;
		draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((!sig_feature(SIGFEAT_USER1) &&
		!sig_feature(SIGFEAT_USER2)) ||
		(!route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else
			draw_state = 5;
	}
	else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE)))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4f_Max40Hi_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 &&
		!sig_feature(SIGFEAT_USER1)) ||
		(!route_set() &&
		!sig_feature(SIGFEAT_USER1)) ||
		(!sig_feature(SIGFEAT_USER1) &&
		!sig_feature(SIGFEAT_USER2)))
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			sig_feature(SIGFEAT_GRADIENT_PLATE))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
				(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
				next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
				(sig_feature(SIGFEAT_NUMBER_PLATE) ||
				sig_feature(SIGFEAT_USER4)))
			)
				draw_state = 5;
			else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
				(sig_feature(SIGFEAT_NUMBER_PLATE) ||
				sig_feature(SIGFEAT_USER4))) ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				draw_state = 6;
			else
				draw_state = 7;
		}
	}
	else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 2;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 3;
		else
			draw_state = 4;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 0F_INFO

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
		state = SIGASP_CLEAR_1;
	else if (sig_feature(SIGFEAT_USER4) && sig_feature(SIGFEAT_NUMBER_PLATE))
		state = next_sig_lr(SIGFN_DISTANCE);
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BEALLITO

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	this_sig_lr ();
	extern float	dist_multi_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature();
	float			next_state;
	float			this_state;

	next_state = next_sig_lr (SIGFN_NORMAL);
	this_state = this_sig_lr (SIGFN_INFO);

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED )
	{
		state = SIGASP_STOP;
	}
	else if ( sig_feature (SIGFEAT_NUMBER_PLATE) && next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP )
	{
		state = SIGASP_STOP;
	}
	else if ( sig_feature (SIGFEAT_NUMBER_PLATE) && next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING )
	{
		state = SIGASP_RESTRICTING;
	}
	else if ( route_set () )
	{
		if ( sig_feature (SIGFEAT_USER3) )
		{
			state = SIGASP_RESTRICTING;
		}
		else if ( block_state () !=# BLOCK_CLEAR )
		{
			state = SIGASP_STOP;
		}
		else if ( sig_feature (SIGFEAT_USER1) && sig_feature (SIGFEAT_USER2) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if ( sig_feature (SIGFEAT_USER1) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if ( sig_feature (SIGFEAT_USER2) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
	}
	else										// Több útvonal van
	{
		if (this_state ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)					// INFO_Max
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = next_sig_lr (SIGFN_NORMAL);					// Akkor Max-ig
			}
		}
		else if (this_state ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)				// INFO_Max ???
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = next_sig_lr (SIGFN_NORMAL);					// Akkor Max-ig
			}
		}
		else if (this_state ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)					// INFO_40
		{									// Akkor 40-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)					// INFO_80
		{									// Akkor 80-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)					// INFO_120
		{									// Akkor 120-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_RESTRICTING)				// INFO_SHUNT
		{
			state = SIGASP_RESTRICTING;
		}
		else if (this_state ==# SIGASP_STOP_AND_PROCEED )			// INFO_HIVO
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		else if (sig_feature ( SIGFEAT_GRADIENT_PLATE ) )			// További útvonal tolatásra
		{
			state = SIGASP_RESTRICTING;			
		}
		else if ( block_state () !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	return;

//------------------------------------------------------------
SCRIPT 0F_TH

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR ||
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP;
	else
		state = next_sig_lr(SIGFN_NORMAL);
	return;

//------------------------------------------------------------
SCRIPT 0F_VZ

	extern float state;

	state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT AS

	extern float draw_state;
	extern float state;

	state = SIGASP_CLEAR_2;
	draw_state = 1;

//------------------------------------------------------------
SCRIPT AS2

	extern float draw_state;
	extern float enabled;

	if (enabled)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT ALAK_E

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = next_sig_lr(SIGFN_NORMAL);
	if (block_state() !=# BLOCK_CLEAR || !enabled)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_1

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_2

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F1NB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F2A

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F2B

	extern float block_state();
	extern float sig_feature();
	extern float this_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 0;
	if (!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		block_state() !=# BLOCK_CLEAR
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 0F_FELOLDO

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	dist_multi_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature();
	float			next_state;
	float			this_state;

	next_state = next_sig_lr (SIGFN_NORMAL);
	this_state = this_sig_lr (SIGFN_INFO);

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED )
	{
		state = SIGASP_STOP;
	}
	else if ( sig_feature (SIGFEAT_NUMBER_PLATE) && next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP )
	{
		state = SIGASP_STOP_AND_PROCEED;
	}
	else if ( sig_feature (SIGFEAT_NUMBER_PLATE) && next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING )
	{
		state = SIGASP_RESTRICTING;
	}
	else if ( route_set () )
	{
		if ( sig_feature (SIGFEAT_USER3) )
		{
			state = SIGASP_RESTRICTING;
		}
		else if ( block_state () !=# BLOCK_CLEAR )
		{
			state = SIGASP_STOP;
		}
		else if ( sig_feature (SIGFEAT_USER1) && sig_feature (SIGFEAT_USER2) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if ( sig_feature (SIGFEAT_USER1) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if ( sig_feature (SIGFEAT_USER2) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
	}
	else										// Több útvonal van
	{
		if (this_state ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)					// INFO_Max
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = next_sig_lr (SIGFN_NORMAL);					// Akkor Max-ig
			}
		}
		else if (this_state ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)				// INFO_Max ???
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = next_sig_lr (SIGFN_NORMAL);					// Akkor Max-ig
			}
		}
		else if (this_state ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)					// INFO_40
		{									// Akkor 40-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)					// INFO_80
		{									// Akkor 80-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)					// INFO_120
		{									// Akkor 120-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_RESTRICTING)				// INFO_SHUNT
		{
			state = SIGASP_RESTRICTING;
		}
		else if (this_state ==# SIGASP_STOP_AND_PROCEED )			// INFO_HIVO
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		else if (sig_feature ( SIGFEAT_GRADIENT_PLATE ) )			// További útvonal tolatásra
		{
			state = SIGASP_RESTRICTING;			
		}
		else if ( block_state () !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	return;

//------------------------------------------------------------
SCRIPT 1F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		block_state() !=# BLOCK_CLEAR ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		draw_state = 1;
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_RESTRICTING;
	}

//------------------------------------------------------------
SCRIPT 1F_VT

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 1F_H

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		block_state() !=# BLOCK_CLEAR ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2f_At

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 2F_TT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TNB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_E

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 2;
	if (block_state() !=# BLOCK_CLEAR || !enabled)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 0;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F_ENB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 2;
	if (block_state() !=# BLOCK_CLEAR || !enabled)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 0;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2FS

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 2FS_NB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 2F

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_kij

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 2F_Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 3F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3FK_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_number_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_B

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 5;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 6;
		else
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
			draw_state = 7;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_sarga

	extern float block_state();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
		block_state() ==# BLOCK_CLEAR &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT 3F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 5;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 6;
		else
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
			draw_state = 7;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 3F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 5;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 6;
		else
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
			draw_state = 7;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max80Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 &&
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		(sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_2;
		draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3FS_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 ||
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 3FS_Max4015

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 ||
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3FSK_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 ||
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3FS_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 ||
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_I

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 4F_I_Ru

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 4FJelR_ISM

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 4F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4FR_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4F_IT_B

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F_T_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 2F_E_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 2;
	if (block_state() !=# BLOCK_CLEAR || !enabled)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 0;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 5;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 6;
		else
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
			draw_state = 7;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiT_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4FR_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max8040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 11;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 12;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 13;
		else
			draw_state = 14;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_APPROACH_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 7;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 8;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER2) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 4;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max8040HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 11;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 12;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 13;
		else
			draw_state = 14;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_APPROACH_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 7;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 8;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER2) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 4;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiSi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiSiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max12040Hi

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_2;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_1 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max12040HiVO

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_2;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_1 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max1208040HiVO

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_2;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_2 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_2;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 20;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 20;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 19;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 18;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 17;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_2;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 20;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 20;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 19;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 18;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 17;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 20;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 20;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 19;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 18;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 17;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_2;
				draw_state = 16;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_2;
				draw_state = 16;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_2;
				draw_state = 16;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 0;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 0;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 0;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 22;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 22;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 22;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 22;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_GYVZ_120

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_GYVZ_120

	extern float block_state();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 0;
		}
	}
	else
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT INFO_Max

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_CLEAR_1;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT INFO_120

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_1;

//------------------------------------------------------------
SCRIPT INFO_80

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_APPROACH_2;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT INFO_40

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_APPROACH_3;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT INFO_SHUNT

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT INFO_HIVO

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_STOP_AND_PROCEED;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT VALTO_HM

	extern float route_set();
	extern float draw_state;
	extern float state;

	if (route_set())
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;
	extern float state;

	state = next_sig_lr(SIGFN_INFO);
	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I2

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;
	extern float state;

	state = next_sig_lr(SIGFN_INFO);
	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VS_I

	extern float draw_state;
	extern float state;
	extern float enabled;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	return;

//------------------------------------------------------------
SCRIPT VS

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float this_sig_lr();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if ((!enabled &&
		this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 1;
	}
	return;
	return;

//------------------------------------------------------------
SCRIPT 2F_TT_F

	extern float state;

	state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_TT_RuF

	extern float state;

	state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT ASF

	extern float state;
	extern float enabled;
	extern float draw_state;

	state = SIGASP_CLEAR_1;
	if (enabled)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40_KT

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 6;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 6;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 5;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 5;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 4;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	state = SIGASP_STOP;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 1;
		}
		else
			draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 2;
		}
	}
	else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_A

	extern float block_state();
	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	state = SIGASP_STOP;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
			)
				draw_state = 1;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
				draw_state = 4;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
		}
		else
			draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}
	else if (sig_feature(SIGFEAT_USER1) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else if (!sig_feature(SIGFEAT_USER1) || !sig_feature(SIGFEAT_USER2))
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT 2F_Elojelzo

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float this_sig_lr();
	extern float state;
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 0;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			(sig_feature(SIGFEAT_USER1) ||
			sig_feature(SIGFEAT_USER2))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 4;
		}
		else
		{
			state = SIGASP_STOP;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 1;
			else
				draw_state = 0;
		}
	}
	else if (sig_feature(SIGFEAT_USER1) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER2) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		draw_state = 0;
		state = SIGASP_STOP_AND_PROCEED;
	}
	else if (!sig_feature(SIGFEAT_USER1) || !sig_feature(SIGFEAT_USER2))
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_B

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 2;
	state = SIGASP_STOP_AND_PROCEED;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 1;
		}
		else
			draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 2;
		}
	}
	else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float this_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 5;
	state = SIGASP_STOP_AND_PROCEED;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
				draw_state = 4;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
				draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			!enabled &&
			(sig_feature(SIGFEAT_USER1) ||
			sig_feature(SIGFEAT_USER2)))
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}
	else if (sig_feature(SIGFEAT_USER2) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		draw_state = 0;
		state = SIGASP_STOP_AND_PROCEED;
	}
	else if (!sig_feature(SIGFEAT_USER1) || !sig_feature(SIGFEAT_USER2))
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}


















///////////////////////////////////////////////////////////////////////////////
// Signal Type Logic Scripts
//


///////////////////////////////////////////////////////////////////////////////

SCRIPT TM_KSZT

//Skrypt tarczy manewrowej ksztaltowek

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_lr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( !enabled ) 
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_RESTRICTING; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT OSKSZT_3_GRN

//Tarczy ostrzegawczej ksztaltowej trzystawnej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_2 ) 	

	{ state = SIGASP_CLEAR_2; }
else
	{ state = SIGASP_APPROACH_1; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT OSKSZT_3_DLN

//Tarczy "strzaly" w ostrzegawczej ksztaltowej trzystawnej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 ) 	

	{ state = SIGASP_APPROACH_2; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT OSKSZT_2

//Tarczy tarczy ostrzegawczej ksztaltowej dwustawnej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	float			next_state;
	//float			czy_na_bok;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( 	next_state ==# SIGASP_STOP ||
	next_state ==# SIGASP_STOP_AND_PROCEED ) 	
	{ state = SIGASP_APPROACH_1; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT SEMKSZT_1

//Skrypt semafora ksztaltowego jednoramiennego

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if (  !enabled ||				   				//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 				//blok zajety
	next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT SEMKSZT_2_GRN

//Skrypt gornego ramienia semafora 2-ramiennnego ksztaltowego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			this_state;
	//float			next_state;
	//float			ziel_mig_czter;

this_state = this_sig_mr ( SIGFN_NORMAL );
if ( this_state ==# SIGASP_STOP || this_state ==# SIGASP_STOP_AND_PROCEED 
	|| this_state ==# SIGASP_RESTRICTING )
	{ state = SIGASP_STOP; }  //podajemy czerwone
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEMKSZT_2_DLN

//Skrypt dolnego ramienia semafora 2-ramienneg ksztaltowego

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;

	if ( !enabled ||
		block_state() ==# BLOCK_OCCUPIED ||
		next_sig_mr (SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 
		{ state = SIGASP_STOP; }
	else
		{
		if ( 
			(!route_set() ) 
			|| ( !sig_feature( SIGFEAT_USER1 ) ) 
		   )
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_CLEAR_2; }
		}
	
draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT RESET

//Skrypt wskaznika w5

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_na_bok;


if ( !enabled || block_state() ==# BLOCK_OCCUPIED ) 
	{ state = SIGASP_CLEAR_1; }
else
	{	
		if ( sig_feature ( SIGFEAT_USER1 ) )
			{ 
			next_state = next_sig_mr ( SIGFN_NORMAL ); 
			if ( next_state ==# SIGASP_STOP ) 
				{ state = SIGASP_STOP_AND_PROCEED; }
			else
				{ state = next_state; }
			}
		else
			{ state = SIGASP_CLEAR_2; }
	}

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT TMAN

//Skrypt tarczy manewrowej

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_lr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( !enabled ) 
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_RESTRICTING; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT TMAN_KARZ

//Skrypt tarczy manewrowej karzelkowej

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_lr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( !enabled ) 
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_RESTRICTING; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT POWT

//Skrypt semafora powtarzajacego

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
		if ( next_state ==# SIGASP_APPROACH_1 ) //czy zolte mig.
			{ state = SIGASP_APPROACH_2; }
		else 
			{
			if (next_state ==# SIGASP_APPROACH_2 ) //czy zielone mig.
				{state = SIGASP_APPROACH_3;}
			else 
				{state = SIGASP_CLEAR_2;} //zielone
			}
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

SCRIPT POWT-2

//Skrypt semafora powtarzajacego 2-kom

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
		if ( next_state ==# SIGASP_APPROACH_1 ) //czy zolte mig.
			{ state = SIGASP_APPROACH_2; }
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

SCRIPT OS

//Skrypt tarczy ostrzegawczej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
		if ( next_state ==# SIGASP_APPROACH_1 ) //czy zolte mig.
			{ state = SIGASP_APPROACH_2; }
		else 
			{
			if (next_state ==# SIGASP_APPROACH_2 ) //czy zielone mig.
				{state = SIGASP_APPROACH_3;}
			else 
				{state = SIGASP_CLEAR_2;} //zielone
			}
	}

draw_state = def_draw_state (state);


SCRIPT OSw

//Skrypt tarczy ostrzegawczej na bramke

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
		if ( next_state ==# SIGASP_APPROACH_1 ) //czy zolte mig.
			{ state = SIGASP_APPROACH_2; }
		else 
			{
			if (next_state ==# SIGASP_APPROACH_2 ) //czy zielone mig.
				{state = SIGASP_APPROACH_3;}
			else 
				{state = SIGASP_CLEAR_2;} //zielone
			}
	}

draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

SCRIPT OS_1

//Skrypt tarczy ostrzegawczej jednokomorowej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
	state = SIGASP_APPROACH_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT SBL_DLN

//Skrypt zasadniczej czesci semfora SBL

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_na_bok;

	
	if ( block_state() ==# BLOCK_OCCUPIED) 
		{ state = SIGASP_STOP; }
	else
		{
		next_state = next_sig_mr ( SIGFN_NORMAL );
		if ( next_state ==# SIGASP_STOP ||
		     next_state ==# SIGASP_STOP_AND_PROCEED )
				{ state = SIGASP_APPROACH_2; } //podajemy zolte
		else //sprawdzamy czy podac zielone migajace
			{
			if ( sig_feature( SIGFEAT_USER1 ) && next_state ==# SIGASP_APPROACH_2 )
				{ state = SIGASP_APPROACH_3;}
			else
				{ state = SIGASP_CLEAR_2; }
			}
		}
	
draw_state = def_draw_state ( state );
if ( state ==# SIGASP_CLEAR_2 && (!enabled ) )
	{draw_state = 1; } 


SCRIPT SBL_DLNw

//Skrypt zasadniczej czesci semfora SBL

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_na_bok;

	
	if ( block_state() ==# BLOCK_OCCUPIED) 
		{ state = SIGASP_STOP; }
	else
		{
		next_state = next_sig_mr ( SIGFN_NORMAL );
		if ( next_state ==# SIGASP_STOP ||
		     next_state ==# SIGASP_STOP_AND_PROCEED )
				{ state = SIGASP_APPROACH_2; } //podajemy zolte
		else //sprawdzamy czy podac zielone migajace
			{
			if ( sig_feature( SIGFEAT_USER1 ) && next_state ==# SIGASP_APPROACH_2 )
				{ state = SIGASP_APPROACH_3;}
			else
				{ state = SIGASP_CLEAR_2; }
			}
		}
	
draw_state = def_draw_state ( state );
if ( state ==# SIGASP_CLEAR_2 && (!enabled ) )
	{draw_state = 1; } 


///////////////////////////////////////////////////////////////////////////////

SCRIPT SBL_GRN

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			this_state;
	float			next_state;
	float			ziel_mig_czter;

this_state = this_sig_mr ( SIGFN_NORMAL );
if ( this_state ==# SIGASP_STOP || this_state ==# SIGASP_STOP_AND_PROCEED 
	|| this_state ==# SIGASP_RESTRICTING )
	{ state = SIGASP_STOP; }  //podajemy puste
else
	{
	if ( this_state ==# SIGASP_APPROACH_2 )
		{ state = SIGASP_APPROACH_1; } //podajemy zolte
	else 
		{
		if ( this_state ==# SIGASP_APPROACH_3 )
			{ state = SIGASP_APPROACH_3; } //podajemy zielone migajace
		else //wiemy, ze tu jest jazda na max
			{
			if ( next_sig_mr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 )
				{ state = SIGASP_APPROACH_2; } //podajemy zolte migajace
			else
				{ state = SIGASP_CLEAR_2;} //podajemy zielone
			}
		}	
	}

draw_state = def_draw_state (state);


SCRIPT SBL_GRNw

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			this_state;
	float			next_state;
	float			ziel_mig_czter;

this_state = this_sig_mr ( SIGFN_NORMAL );
if ( this_state ==# SIGASP_STOP || this_state ==# SIGASP_STOP_AND_PROCEED 
	|| this_state ==# SIGASP_RESTRICTING )
	{ state = SIGASP_STOP; }  //podajemy puste
else
	{
	if ( this_state ==# SIGASP_APPROACH_2 )
		{ state = SIGASP_APPROACH_1; } //podajemy zolte
	else 
		{
		if ( this_state ==# SIGASP_APPROACH_3 )
			{ state = SIGASP_APPROACH_3; } //podajemy zielone migajace
		else //wiemy, ze tu jest jazda na max
			{
			if ( next_sig_mr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 )
				{ state = SIGASP_APPROACH_2; } //podajemy zolte migajace
			else
				{ state = SIGASP_CLEAR_2;} //podajemy zielone
			}
		}	
	}

draw_state = def_draw_state (state);




///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_1

//Skrypt sygnalu zamkniecia toru

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_lr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


state = SIGASP_STOP;

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_CB

//Skrypt semafora dwukomorowego czerwone + biale

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_stop;


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  
	!enabled ||				   		//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 		//blok zajety
	next_state  ==# SIGASP_CLEAR_1  		//reset pokazuje zajetosc bloku 
   ) 						
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_STOP_AND_PROCEED; }

if ( sig_feature( SIGFEAT_USER1 ) )
	{ 
	if ( next_state ==# SIGASP_STOP )
		{ state = SIGASP_STOP;}
	else
		{ state = SIGASP_STOP_AND_PROCEED; }
	}
draw_state = def_draw_state ( state );
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_SZ2N

//Skrypt semafora dwukomorowego - sygnalu zastepczego

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_stop;


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  
	!enabled ||				   		//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 		//blok zajety
	next_state  ==# SIGASP_CLEAR_1  		//reset pokazuje zajetosc bloku 
   ) 						
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_STOP_AND_PROCEED; }

if ( sig_feature( SIGFEAT_USER1 ) )
	{ 
	if ( next_state ==# SIGASP_STOP )
		{ state = SIGASP_STOP;}
	else
		{ state = SIGASP_STOP_AND_PROCEED; }
	}
draw_state = def_draw_state ( state );

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_CB_KARZ

//Skrypt semafora dwukomorowego czerwone + biale

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_na_bok;


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  
	!enabled ||				   		//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 		//blok zajety
	next_state  ==# SIGASP_CLEAR_1  		//reset pokazuje zajetosc bloku 
   ) 						
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_STOP_AND_PROCEED; }

if ( sig_feature( SIGFEAT_USER1 ) )
	{ 
	if ( next_state ==# SIGASP_STOP )
		{ state = SIGASP_STOP;}
	else
		{ state = SIGASP_STOP_AND_PROCEED; }
	}
draw_state = def_draw_state ( state );
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_DLN_C

//Skrypt zasadniczej czesci semafora dwukomorowego czerwone + niebiale

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if (  !enabled ||				   				//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 				//blok zajety
	next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_DLN_C_KARZ

//Skrypt semafora dwukomorowego czerwone + niebiale

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if (  !enabled ||				   				//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 				//blok zajety
	next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_GRN_Z

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_GRN_Z_KARZ

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_GRN_P

//Skrypt czesci semfora 2-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_GRN_P_KARZ

//Skrypt czesci semfora 2-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////




SCRIPT SEM_3_DLN_40_CP

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + zolte)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  
	!enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 
						

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set(); }
	else
		{prosto = 1;}
	if ( !prosto ||  //w bok na rozjezdzie
		sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
			{ state = SIGASP_APPROACH_1; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_40_CP_KARZ

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + zolte)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
	if ( !prosto ||  //w bok na rozjezdzie
		sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
			{ state = SIGASP_APPROACH_1; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_60_CP

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + zolte)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
	if ( !prosto ||  //w bok na rozjezdzie
		sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
			{ state = SIGASP_APPROACH_1; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_100_CP

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + zolte)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
	if ( !prosto ||  //w bok na rozjezdzie
		sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
			{ state = SIGASP_APPROACH_2; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_P

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_P_KARZ

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_Z

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_Z_KARZ

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_SR_P

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_SR_P_KARZ

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_SR_Z

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_SR_Z_KARZ

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_CB

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + biale)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;

next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
		if ( !prosto || 					//w bok na rozjezdzie
			next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy
				
			{ state = SIGASP_STOP_AND_PROCEED; }
		else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_CB_KARZ

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + biale)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
		if ( !prosto || 					//w bok na rozjezdzie
			next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy
				
			{ state = SIGASP_STOP_AND_PROCEED; }
		else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_C

//Skrypt zasadniczej czesci semafora trojkomorowego zielone + czerwone + pomaranczowe

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if (  !enabled ||				   				//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 				//blok zajety
	next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_ZP

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_4_GRN_P

//Skrypt czesci semfora 4-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_4_GRN_Z

//Skrypt czesci semfora 4-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);


SCRIPT SEM_4_GRN_Zw

//Skrypt czesci semfora 4-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

SCRIPT SEM_4_GRN_Zn

//Skrypt czesci semfora 4-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_4_DLN_CB

//Skrypt zasadniczej czesci semafora czterokomorowego (czerwone + biale)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
	if ( !prosto ||   				//w bok na rozjezdzie
		next_state ==# SIGASP_RESTRICTING )	//jazda na manewrowy
		
			{ state = SIGASP_STOP_AND_PROCEED; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_4_GRN_ZP

//Skrypt czesci semafora czterokomorowego informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_5_DLN_40_CPB

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED  || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) ||  //zawsze podajemy sygnal zastepczy
	    next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy	
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


SCRIPT SEM_5_DLN_40_CPBw

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED  || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) ||  //zawsze podajemy sygnal zastepczy
	    next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy	
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


SCRIPT SEM_5_DLN_40_CPBn

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED  || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) ||  //zawsze podajemy sygnal zastepczy
	    next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy	
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}



///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_5_DLN_60_CPB

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) || 		//zawsze podajemy sygnal zastepczy
		next_state ==# SIGASP_RESTRICTING ) 	//jazda na manewrowy
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


SCRIPT SEM_5_DLN_60_CPBw

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) || 		//zawsze podajemy sygnal zastepczy
		next_state ==# SIGASP_RESTRICTING ) 	//jazda na manewrowy
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_5_DLN_100_CPB

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) || 	//zawsze podajemy sygnal zastepczy
		next_state ==# SIGASP_RESTRICTING ) //jazda na manewrowy
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_2; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

SCRIPT SEM_5_DLN_100_CPBw

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) || 	//zawsze podajemy sygnal zastepczy
		next_state ==# SIGASP_RESTRICTING ) //jazda na manewrowy
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_2; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}



///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_5_GRN_ZP

//Skrypt czesci semafora pieciokomorowego informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);


SCRIPT SEM_5_GRN_ZPw

//Skrypt czesci semafora pieciokomorowego informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);

SCRIPT SEM_5_GRN_ZPn

//Skrypt czesci semafora pieciokomorowego informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_100

//Skrypt pasa swietlnego zielonego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_2 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);


SCRIPT PAS_100w

//Skrypt pasa swietlnego zielonego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_2 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_100_P

//Skrypt pasa swietlnego zielonego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_2 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_100_L

//Skrypt pasa swietlnego zielonego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_2 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_60

//Skrypt pasa swietlnego zoltego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);


SCRIPT PAS_60w

//Skrypt pasa swietlnego zoltego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_60_L

//Skrypt pasa swietlnego zoltego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_60_P

//Skrypt pasa swietlnego zoltego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

//Wykolejnice
SCRIPT VYKOL

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () ==# 2 )
	draw_state = 0;
	else draw_state = 1;


SCRIPT VYKNAV

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () ==# 2 )
	draw_state = 0;
	else draw_state = 1;
///////////////////////////////////////////////////////////////////////////////
SCRIPT WNX

	extern float	route_set ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;

	state = 7;
	draw_state = 0;

	if ( route_set() )
	{
		draw_state = 1;
		return;
	}

	return;
	





//------------------------------------------------------------
//
// Created by SigMexx V1.4.3
//
// contains following scripts:
//	- Alak_Bejelz
//	- Alak_E11
//	- Alak_E12
//	- Alak_E21
//	- Alak_E22
//	- Alak_F11
//	- Alak_F21
//	- Alak_Kijelz
//	- Alak_MRH_fedezo
//	- Allj_tabla
//	- Be_FELOLDO
//	- Ki_FELOLDO
//	- Elojelzo
//	- Indikator80
//	- Indikator15
//	- Terkoz
//	- 2f_At
//	- 2f_Janus_A
//	- 2f_Janus_B
//	- 3f_Janus_A
//	- 3f_Janus_B
//	- 3F_Max80Hi
//	- 3f_AT_cs
//	- 3f_AT_b_cs
//	- 3F_Max40_Cs
//	- 4f_Max40_cs
//	- 4f_Max40Hi_cs
//	- 0F_INFO
//	- 0F_BeINFO
//	- 0F_BEALLITO
//	- 0F_TH
//	- 0F_VZ
//	- AS
//	- AS2
//	- ASF
//	- ALAK_E
//	- BK_Vr_DB_2Flg_1
//	- BK_Vr_DB_2Flg_2
//	- ALAK_F1
//	- ALAK_F1NB
//	- ALAK_F2A
//	- ALAK_F2B
//	- ALAK_TNB
//	- 0F_FELOLDO
//	- 1F_T
//	- 1F_VT
//	- 1F_H
//	- 2F_TT
//	- 2F_TT_F
//	- 2F_TT_RuF
//	- 2F_TT_Ru
//	- 2F_T
//	- 2F_TNB
//	- 2F_E
//	- 2F_E_Old
//	- 2F_ENB
//	- 2FS
//	- 2FS_NB
//	- 2F
//	- 2F_Old
//	- 3F_Max40Hi_71_kij
//	- 2F_Hi
//	- 3F_AT
//	- 3FK_AT
//	- 3F_IT_A
//	- 3F_IT_B
//	- 3F_FIT
//	- 3F_Max40Hi
//	- 3F_Max40Hi_71_sarga
//	- 3F_Max40
//	- 3F_Max40_Old
//	- 3F_Max40HiT
//	- 3FS_Max40Hi
//	- 3FS_4015
//	- 3FS_Max40
//	- 4F_I
//	- 4F_I_Ru
//	- 4FJelR_ISM
//	- 4F_AT
//	- 4FR_AT
//	- 4F_IT_A
//	- 4F_IT_B
//	- 4F_FIT
//	- 4F_Max40
//	- 4F_Max40_Old
//	- 4F_Max40_T
//	- 4F_Max40Hi
//	- 4F_Max40Hi_Old
//	- 4F_Max40HiVO
//	- 4F_Max40HiVO_Old
//	- 4F_Max40HiT
//	- 2F_T_ru
//	- 2F_Ru
//	- 2F_E_Ru
//	- 3F_Max40Hi_Ru
//	- 4F_Max40HiT_ru
//	- 4F_Max40Hi_K_ru
//	- 4FR_Max40Hi
//	- 4FR_Max40HiT
//	- 4F_Max8040Hi
//	- 4F_Max8040HiT (unused)
//	- 4F_Max8040HiVO
//	- 4F_Max40HiSi
//	- 4F_Max40Si_T
//	- 4F_Max12040Hi
//	- 4F_Max12040HiVO
//	- 4F_Max1208040HiVO
//	- 4F_GYVZ_120
//	- INFO_Max
//	- INFO_120
//	- INFO_80
//	- INFO_40
//	- INFO_SHUNT
//	- INFO_HIVO
//	- VALTO_HM
//	- VALTO_HM_I
//	- VALTO_HM_I2
//	- VS_I
//	- VS
//	- 4F_Max40_KT
//	- 1F_HIVO_TOL
//	- 1F_HIVO
//	- Jelzesadas
//	- Hivasfeloldo
//	- Jelzestovabbitas

//------------------------------------------------------------
SCRIPT Alak_Bejelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			sig_feature(SIGFEAT_NUMBER_PLATE)) ||
			block_state() ==# BLOCK_JN_OBSTRUCTED
		)
			state = SIGASP_STOP;
		else if (block_state() ==# BLOCK_CLEAR)
		{
			draw_state = 1;
			if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
				state = SIGASP_CLEAR_1;
			else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
				state = SIGASP_APPROACH_3;
		}
		else if (block_state() ==# BLOCK_OCCUPIED)
			state = SIGASP_STOP_AND_PROCEED;
	}

//------------------------------------------------------------
SCRIPT Alak_E11

	extern float next_sig_lr();
	extern float draw_state;

	if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E12

	extern float next_sig_lr();
	extern float block_state();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	state = SIGASP_STOP;
	if (!enabled || block_state() !=# BLOCK_CLEAR)
		draw_state = 0;
	else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E21

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float draw_state;

	draw_state = 0;
	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
			draw_state = 1;
		else
			draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT Alak_E22

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
			draw_state = 1;
		else
			draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT Alak_F11

	extern float this_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		if (sig_feature(SIGFEAT_USER4))
			draw_state = 1;
		else
			draw_state = 0;
	}
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			state = SIGASP_CLEAR_1;
		else
			state = SIGASP_APPROACH_3;
	}

//------------------------------------------------------------
SCRIPT Alak_F21

	extern float this_sig_lr();
	extern float draw_state;
	extern float state;
	extern float enabled;

	state = SIGASP_STOP;
	draw_state = 0;
	if (!enabled)
		draw_state = 0;
	else if (this_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_Kijelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if ((sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_APPROACH_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Alak_MRH_fedezo

	extern float route_set();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (!route_set() ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT Allj_tabla

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;

	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (BLOCK_CLEAR !=# block_state())
	{
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_STOP;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Be_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER4))
			state = SIGASP_STOP_AND_PROCEED;
		else if (sig_feature(SIGFEAT_NUMBER_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER3)
	)
		state = SIGASP_APPROACH_3;
	else if (!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2) ||
		!sig_feature(SIGFEAT_USER3)
	)
		state = SIGASP_CLEAR_2;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Ki_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (sig_feature(SIGFEAT_GRADIENT_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		(sig_feature(SIGFEAT_USER3) &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_GRADIENT_PLATE)) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_3;
	else if (!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2) ||
		!sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Elojelzo

	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else
			state = SIGASP_CLEAR_2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Indikator80

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Indikator15

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;
	extern float state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		draw_state = 1;
		state = SIGASP_APPROACH_3;
	}
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Terkoz

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float state;
	extern float enabled;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		next_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP
	)
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2f_At

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 2;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 2;
		}
		else if (draw_state == 2)
			state = SIGASP_STOP_AND_PROCEED;
		else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 0;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 1;
		}
		else if (draw_state == 5)
			state = SIGASP_STOP_AND_PROCEED;
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
			state = SIGASP_STOP_AND_PROCEED;
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max80Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3f_AT_cs

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			draw_state = 4;
			state = SIGASP_CLEAR_2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else
			draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 3f_AT_b_cs

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 2;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) == SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40_Cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4f_Max40_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else
			draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP &&
			block_state() !=# BLOCK_CLEAR
		)
			state = SIGASP_STOP;
		else
			state = SIGASP_RESTRICTING;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4f_Max40Hi_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else
			draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 9;
	}

//------------------------------------------------------------
SCRIPT 0F_INFO

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!sig_feature(SIGFEAT_USER4)
	)
		state = SIGASP_CLEAR_1;
	else if (sig_feature(SIGFEAT_USER4))
		state = next_sig_lr(SIGFN_DISTANCE);
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BeINFO

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		state = next_sig_lr(SIGFN_DISTANCE);
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BEALLITO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else
	{
		draw_state = 0;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
			sig_feature(SIGFEAT_USER3)
		)
			state = SIGASP_RESTRICTING;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE))
				state = SIGASP_STOP;
			else
				state = SIGASP_CLEAR_2;
		}
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			(route_set() &&
			(!sig_feature(SIGFEAT_USER1) &&
			!sig_feature(SIGFEAT_USER2))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1
		)
			state = SIGASP_CLEAR_1;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
			sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = SIGASP_APPROACH_2;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			sig_feature(SIGFEAT_USER2) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER2)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			state = SIGASP_APPROACH_3;
		else
			state = SIGASP_CLEAR_2;
	}

//------------------------------------------------------------
SCRIPT 0F_TH

	extern float next_sig_lr();
	extern float sig_feature();
	extern float opp_sig_lr();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else
	{
		draw_state = 0;
		if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			(sig_feature(SIGFEAT_USER3) &&
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		)
			state = SIGASP_STOP;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE))
				state = SIGASP_STOP;
			else
				state = SIGASP_CLEAR_1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
			state = SIGASP_CLEAR_1;
	}

//------------------------------------------------------------
SCRIPT 0F_VZ

	extern float state;

	state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT AS

	extern float draw_state;

	draw_state = 1;

//------------------------------------------------------------
SCRIPT AS2

	extern float draw_state;
	extern float enabled;

	if (enabled)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT ASF

	extern float draw_state;

	draw_state = 0;

//------------------------------------------------------------
SCRIPT ALAK_E

	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 1;
	}
	else if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_1

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_2

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1NB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F2A

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_F2B

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 0;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 0F_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (sig_feature(SIGFEAT_GRADIENT_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		(sig_feature(SIGFEAT_USER3) &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_GRADIENT_PLATE)) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_3;
	else if (sig_feature(SIGFEAT_USER3))
		state = SIGASP_CLEAR_2;
	else if (!sig_feature(SIGFEAT_USER1) && !sig_feature(SIGFEAT_USER2))
		state = SIGASP_CLEAR_1;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 1F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 1F_VT

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 1F_H

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F_TT

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_F

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_RuF

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_STOP_AND_PROCEED;
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_E

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 4;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	)
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 2F_E_Old

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 4;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	)
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 2F_ENB

	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 2FS

	extern float next_sig_lr();
	extern float sig_feature();
	extern float block_state();
	extern float this_sig_lr();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2FS_NB

	extern float next_sig_lr();
	extern float sig_feature();
	extern float block_state();
	extern float this_sig_lr();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_kij

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			draw_state = 2;
		else if (sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3
		)
			draw_state = 1;
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT 2F_Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3FK_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			draw_state = 4;
			state = SIGASP_CLEAR_2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 2;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) == SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 4;
		else
			draw_state = 5;
	}

//------------------------------------------------------------
SCRIPT 3F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (state == SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 5;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_sarga

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float this_state;
	float has_gradient_plate;

	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 8;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 8;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 7;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 7;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 8;
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 1;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 5;
	}
	else if (sig_feature(SIGFEAT_USER1) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (sig_feature(SIGFEAT_USER3))
		state = SIGASP_CLEAR_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_Max40Hi

	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float block_state();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_4015

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_Max40

	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_I

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_I_Ru

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4FJelR_ISM

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 4FR_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 4F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else
				draw_state = 4;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_IT_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 4;
			else
				draw_state = 5;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (state == SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 5;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else
				draw_state = 4;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_RESTRICTING;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_RESTRICTING;
			draw_state = 2;
		}
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi

	extern float next_sig_lr();
	extern float block_state();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40Hi_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 2F_T_ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_Ru

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_E_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if ((sig_feature(SIGFEAT_USER4) &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((sig_feature(SIGFEAT_USER4) &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((sig_feature(SIGFEAT_USER4) &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_CLEAR_1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiT_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi_K_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4FR_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4FR_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max8040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max8040HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max8040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiSi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Si_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max12040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 12;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 16;
		else
			draw_state = 15;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 11;
		else
			draw_state = 10;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP &&
			block_state() !=# BLOCK_CLEAR
		)
			state = SIGASP_STOP;
		else
			state = SIGASP_RESTRICTING;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max12040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 12;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 16;
		else
			draw_state = 15;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 11;
		else
			draw_state = 10;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max1208040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 15;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 17;
		else
			draw_state = 16;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 12;
		else
			draw_state = 11;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 18;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 19;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 20;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 22;
		else
			draw_state = 21;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 7;
		else
			draw_state = 6;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_GYVZ_120

	extern float block_state();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float next_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 0;
		}
	}
	else
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT INFO_Max

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_1;

//------------------------------------------------------------
SCRIPT INFO_120

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_1;

//------------------------------------------------------------
SCRIPT INFO_80

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_2;

//------------------------------------------------------------
SCRIPT INFO_40

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_3;

//------------------------------------------------------------
SCRIPT INFO_SHUNT

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;
	extern float draw_state;

	draw_state = 0;
	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT INFO_HIVO

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT VALTO_HM

	extern float route_set();
	extern float draw_state;
	extern float state;

	if (route_set())
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I2

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VS_I

	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else
		state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT VS

	extern float next_sig_lr();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	return;

//------------------------------------------------------------
SCRIPT 4F_Max40_KT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 1F_HIVO_TOL

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		this_sig_lr(SIGFN_REPEATER) !=# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		draw_state = 2;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 1F_HIVO

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Jelzesadas

	extern float this_sig_lr();
	extern float sig_feature();
	extern float route_set();
	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING)
	)
		state = SIGASP_CLEAR_1;
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING)
	)
		state = SIGASP_APPROACH_3;
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Hivasfeloldo

	extern float next_sig_lr();
	extern float block_state();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		draw_state = 0;
		if (block_state() ==# SIGASP_STOP)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = next_sig_lr(SIGFN_NORMAL);
				if (route_set())
					draw_state = 1;
			}
			else
				state = SIGASP_CLEAR_2;
		}
	}

//------------------------------------------------------------
SCRIPT Jelzestovabbitas

	extern float sig_feature();
	extern float next_sig_lr();
	extern float state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
		state = next_sig_lr(SIGFN_NORMAL);
	else
		state = next_sig_lr(SIGFN_DISTANCE);

//------------------------------------------------------------
//
// Created by SigMexx V1.4.3
//
// contains following scripts:
//	- Alak_Bejelz
//	- Alak_E11
//	- Alak_E12
//	- Alak_E21
//	- Alak_E22
//	- Alak_F11
//	- Alak_F21
//	- Alak_Kijelz
//	- Alak_MRH_fedezo
//	- Allj_tabla
//	- Be_FELOLDO
//	- Ki_FELOLDO
//	- Elojelzo
//	- Indikator80
//	- Indikator15
//	- Terkoz
//	- 2f_At
//	- 2f_Janus_A
//	- 2f_Janus_B
//	- 3f_Janus_A
//	- 3f_Janus_B
//	- 3F_Max80Hi
//	- 3f_AT_cs
//	- 3f_AT_b_cs
//	- 3F_Max40_Cs
//	- 4f_Max40_cs
//	- 4f_Max40Hi_cs
//	- 0F_INFO
//	- 0F_BeINFO
//	- 0F_BEALLITO
//	- 0F_TH
//	- 0F_VZ
//	- AS
//	- AS2
//	- ASF
//	- ALAK_E
//	- BK_Vr_DB_2Flg_1
//	- BK_Vr_DB_2Flg_2
//	- ALAK_F1
//	- ALAK_F1NB
//	- ALAK_F2A
//	- ALAK_F2B
//	- ALAK_TNB
//	- 0F_FELOLDO
//	- 1F_T
//	- 1F_VT
//	- 1F_H
//	- 2F_TT
//	- 2F_TT_F
//	- 2F_TT_RuF
//	- 2F_TT_Ru
//	- 2F_T
//	- 2F_TNB
//	- 2F_E
//	- 2F_E_Old
//	- 2F_ENB
//	- 2FS
//	- 2FS_NB
//	- 2F
//	- 2F_Old
//	- 3F_Max40Hi_71_kij
//	- 2F_Hi
//	- 3F_AT
//	- 3FK_AT
//	- 3F_IT_A
//	- 3F_IT_B
//	- 3F_FIT
//	- 3F_Max40Hi
//	- 3F_Max40Hi_71_sarga
//	- 3F_Max40
//	- 3F_Max40_Old
//	- 3F_Max40HiT
//	- 3FS_Max40Hi
//	- 3FS_4015
//	- 3FS_Max40
//	- 4F_I
//	- 4F_I_Ru
//	- 4FJelR_ISM
//	- 4F_AT
//	- 4FR_AT
//	- 4F_IT_A
//	- 4F_IT_B
//	- 4F_FIT
//	- 4F_Max40
//	- 4F_Max40_Old
//	- 4F_Max40_T
//	- 4F_Max40Hi
//	- 4F_Max40Hi_Old
//	- 4F_Max40HiVO
//	- 4F_Max40HiVO_Old
//	- 4F_Max40HiT
//	- 2F_T_ru
//	- 2F_Ru
//	- 2F_E_Ru
//	- 3F_Max40Hi_Ru
//	- 4F_Max40HiT_ru
//	- 4F_Max40Hi_K_ru
//	- 4FR_Max40Hi
//	- 4FR_Max40HiT
//	- 4F_Max8040Hi
//	- 4F_Max8040HiT (unused)
//	- 4F_Max8040HiVO
//	- 4F_Max40HiSi
//	- 4F_Max40Si_T
//	- 4F_Max12040Hi
//	- 4F_Max12040HiVO
//	- 4F_Max1208040HiVO
//	- 4F_GYVZ_120
//	- INFO_Max
//	- INFO_120
//	- INFO_80
//	- INFO_40
//	- INFO_SHUNT
//	- INFO_HIVO
//	- VALTO_HM
//	- VALTO_HM_I
//	- VALTO_HM_I2
//	- VS_I
//	- VS
//	- 4F_Max40_KT
//	- 1F_HIVO_TOL
//	- 1F_HIVO
//	- Jelzesadas
//	- Hivasfeloldo
//	- Jelzestovabbitas

//------------------------------------------------------------
SCRIPT Alak_Bejelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			sig_feature(SIGFEAT_NUMBER_PLATE)) ||
			block_state() ==# BLOCK_JN_OBSTRUCTED
		)
			state = SIGASP_STOP;
		else if (block_state() ==# BLOCK_CLEAR)
		{
			draw_state = 1;
			if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
				state = SIGASP_CLEAR_1;
			else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
				state = SIGASP_APPROACH_3;
		}
		else if (block_state() ==# BLOCK_OCCUPIED)
			state = SIGASP_STOP_AND_PROCEED;
	}

//------------------------------------------------------------
SCRIPT Alak_E11

	extern float next_sig_lr();
	extern float draw_state;

	if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E12

	extern float next_sig_lr();
	extern float block_state();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	state = SIGASP_STOP;
	if (!enabled || block_state() !=# BLOCK_CLEAR)
		draw_state = 0;
	else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E21

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float draw_state;

	draw_state = 0;
	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
			draw_state = 1;
		else
			draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT Alak_E22

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
			draw_state = 1;
		else
			draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT Alak_F11

	extern float this_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		if (sig_feature(SIGFEAT_USER4))
			draw_state = 1;
		else
			draw_state = 0;
	}
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			state = SIGASP_CLEAR_1;
		else
			state = SIGASP_APPROACH_3;
	}

//------------------------------------------------------------
SCRIPT Alak_F21

	extern float this_sig_lr();
	extern float draw_state;
	extern float state;
	extern float enabled;

	state = SIGASP_STOP;
	draw_state = 0;
	if (!enabled)
		draw_state = 0;
	else if (this_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_Kijelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if ((sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_APPROACH_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Alak_MRH_fedezo

	extern float route_set();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (!route_set() ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT Allj_tabla

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;

	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (BLOCK_CLEAR !=# block_state())
	{
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_STOP;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Be_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER4))
			state = SIGASP_STOP_AND_PROCEED;
		else if (sig_feature(SIGFEAT_NUMBER_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER3)
	)
		state = SIGASP_APPROACH_3;
	else if (!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2) ||
		!sig_feature(SIGFEAT_USER3)
	)
		state = SIGASP_CLEAR_2;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Ki_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (sig_feature(SIGFEAT_GRADIENT_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		(sig_feature(SIGFEAT_USER3) &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_GRADIENT_PLATE)) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_3;
	else if (!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2) ||
		!sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Elojelzo

	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else
			state = SIGASP_CLEAR_2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Indikator80

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Indikator15

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;
	extern float state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		draw_state = 1;
		state = SIGASP_APPROACH_3;
	}
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Terkoz

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float state;
	extern float enabled;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		next_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP
	)
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2f_At

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 2;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 2;
		}
		else if (draw_state == 2)
			state = SIGASP_STOP_AND_PROCEED;
		else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 0;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 1;
		}
		else if (draw_state == 5)
			state = SIGASP_STOP_AND_PROCEED;
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
			state = SIGASP_STOP_AND_PROCEED;
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max80Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3f_AT_cs

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			draw_state = 4;
			state = SIGASP_CLEAR_2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else
			draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 3f_AT_b_cs

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 2;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) == SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40_Cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4f_Max40_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else
			draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP &&
			block_state() !=# BLOCK_CLEAR
		)
			state = SIGASP_STOP;
		else
			state = SIGASP_RESTRICTING;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4f_Max40Hi_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else
			draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 9;
	}

//------------------------------------------------------------
SCRIPT 0F_INFO

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!sig_feature(SIGFEAT_USER4)
	)
		state = SIGASP_CLEAR_1;
	else if (sig_feature(SIGFEAT_USER4))
		state = next_sig_lr(SIGFN_DISTANCE);
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BeINFO

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		state = next_sig_lr(SIGFN_DISTANCE);
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BEALLITO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else
	{
		draw_state = 0;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
			sig_feature(SIGFEAT_USER3)
		)
			state = SIGASP_RESTRICTING;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE))
				state = SIGASP_STOP;
			else
				state = SIGASP_CLEAR_2;
		}
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			(route_set() &&
			(!sig_feature(SIGFEAT_USER1) &&
			!sig_feature(SIGFEAT_USER2))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1
		)
			state = SIGASP_CLEAR_1;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
			sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = SIGASP_APPROACH_2;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			sig_feature(SIGFEAT_USER2) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER2)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			state = SIGASP_APPROACH_3;
		else
			state = SIGASP_CLEAR_2;
	}

//------------------------------------------------------------
SCRIPT 0F_TH

	extern float next_sig_lr();
	extern float sig_feature();
	extern float opp_sig_lr();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else
	{
		draw_state = 0;
		if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			(sig_feature(SIGFEAT_USER3) &&
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		)
			state = SIGASP_STOP;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE))
				state = SIGASP_STOP;
			else
				state = SIGASP_CLEAR_1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
			state = SIGASP_CLEAR_1;
	}

//------------------------------------------------------------
SCRIPT 0F_VZ

	extern float state;

	state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT AS

	extern float draw_state;

	draw_state = 1;

//------------------------------------------------------------
SCRIPT AS2

	extern float draw_state;
	extern float enabled;

	if (enabled)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT ASF

	extern float draw_state;

	draw_state = 0;

//------------------------------------------------------------
SCRIPT ALAK_E

	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 1;
	}
	else if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_1

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_2

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1NB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F2A

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_F2B

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 0;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 0F_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (sig_feature(SIGFEAT_GRADIENT_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		(sig_feature(SIGFEAT_USER3) &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_GRADIENT_PLATE)) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_3;
	else if (sig_feature(SIGFEAT_USER3))
		state = SIGASP_CLEAR_2;
	else if (!sig_feature(SIGFEAT_USER1) && !sig_feature(SIGFEAT_USER2))
		state = SIGASP_CLEAR_1;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 1F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 1F_VT

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 1F_H

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F_TT

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_F

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_RuF

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_STOP_AND_PROCEED;
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_E

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 4;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	)
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 2F_E_Old

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 4;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	)
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 2F_ENB

	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 2FS

	extern float next_sig_lr();
	extern float sig_feature();
	extern float block_state();
	extern float this_sig_lr();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2FS_NB

	extern float next_sig_lr();
	extern float sig_feature();
	extern float block_state();
	extern float this_sig_lr();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_kij

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			draw_state = 2;
		else if (sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3
		)
			draw_state = 1;
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT 2F_Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3FK_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			draw_state = 4;
			state = SIGASP_CLEAR_2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 2;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) == SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 4;
		else
			draw_state = 5;
	}

//------------------------------------------------------------
SCRIPT 3F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (state == SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 5;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_sarga

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float this_state;
	float has_gradient_plate;

	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 8;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 8;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 7;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 7;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 8;
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 1;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 5;
	}
	else if (sig_feature(SIGFEAT_USER1) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (sig_feature(SIGFEAT_USER3))
		state = SIGASP_CLEAR_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_Max40Hi

	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float block_state();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_4015

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_Max40

	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_I

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_I_Ru

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4FJelR_ISM

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 4FR_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 4F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else
				draw_state = 4;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_IT_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 4;
			else
				draw_state = 5;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (state == SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 5;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else
				draw_state = 4;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_RESTRICTING;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_RESTRICTING;
			draw_state = 2;
		}
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi

	extern float next_sig_lr();
	extern float block_state();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40Hi_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 2F_T_ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_Ru

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_E_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if ((sig_feature(SIGFEAT_USER4) &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((sig_feature(SIGFEAT_USER4) &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((sig_feature(SIGFEAT_USER4) &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_CLEAR_1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiT_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi_K_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4FR_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4FR_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max8040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max8040HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max8040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiSi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Si_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max12040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 12;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 16;
		else
			draw_state = 15;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 11;
		else
			draw_state = 10;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP &&
			block_state() !=# BLOCK_CLEAR
		)
			state = SIGASP_STOP;
		else
			state = SIGASP_RESTRICTING;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max12040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 12;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 16;
		else
			draw_state = 15;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 11;
		else
			draw_state = 10;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max1208040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 15;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 17;
		else
			draw_state = 16;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 12;
		else
			draw_state = 11;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 18;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 19;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 20;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 22;
		else
			draw_state = 21;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 7;
		else
			draw_state = 6;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_GYVZ_120

	extern float block_state();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float next_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 0;
		}
	}
	else
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT INFO_Max

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_1;

//------------------------------------------------------------
SCRIPT INFO_120

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_1;

//------------------------------------------------------------
SCRIPT INFO_80

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_2;

//------------------------------------------------------------
SCRIPT INFO_40

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_3;

//------------------------------------------------------------
SCRIPT INFO_SHUNT

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;
	extern float draw_state;

	draw_state = 0;
	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT INFO_HIVO

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT VALTO_HM

	extern float route_set();
	extern float draw_state;
	extern float state;

	if (route_set())
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I2

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VS_I

	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else
		state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT VS

	extern float next_sig_lr();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	return;

//------------------------------------------------------------
SCRIPT 4F_Max40_KT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 1F_HIVO_TOL

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		this_sig_lr(SIGFN_REPEATER) !=# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		draw_state = 2;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 1F_HIVO

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Jelzesadas

	extern float this_sig_lr();
	extern float sig_feature();
	extern float route_set();
	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING)
	)
		state = SIGASP_CLEAR_1;
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING)
	)
		state = SIGASP_APPROACH_3;
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Hivasfeloldo

	extern float next_sig_lr();
	extern float block_state();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		draw_state = 0;
		if (block_state() ==# SIGASP_STOP)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = next_sig_lr(SIGFN_NORMAL);
				if (route_set())
					draw_state = 1;
			}
			else
				state = SIGASP_CLEAR_2;
		}
	}

//------------------------------------------------------------
SCRIPT Jelzestovabbitas

	extern float sig_feature();
	extern float next_sig_lr();
	extern float state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
		state = next_sig_lr(SIGFN_NORMAL);
	else
		state = next_sig_lr(SIGFN_DISTANCE);


// End of File


=======
//////////////////////////////////////////////////
//
//  Script pro návesti Ceských Drah verze 2.2
//
//  Jirí Polák jiripolak@volny.cz
//
//  Modely návestidel: Jirí Polák jiripolak@volny.cz
//
//////////////////////////////////////////////////

SCRIPT MEZIN

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) ) 
	state = 0;
	else state = next_nor;


SCRIPT MEZII

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( block_state () !=# 0 ||
		( next_nor != next_inf && next_inf ==# 1 ) )
	state = 1;
	else state = 7;
	

SCRIPT PREDNORM

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;


SCRIPT PRED4/8

	extern float	this_sig_lr ();
	extern float	next_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			this_nor;
	float			next_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( this_nor ==# 0 || this_nor ==# 1 )
	state = 0;
	else if ( next_nor ==# 0 || next_nor ==# 1 ||
		( sig_feature (SIGFEAT_USER3) &&
		( next_nor ==# 2 || next_nor ># 4 ) ) )
	state = 2;
	else if ( next_nor ==# 2 )
	state = 7;
	else state = next_nor;

	draw_state = def_draw_state (state);


SCRIPT PRED6/10

	extern float	this_sig_lr ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 6 )
	draw_state = 0;
	else if ( this_dis ==# 4 )
	draw_state = 1;
	else draw_state = 2;



SCRIPT OPRED4/8

	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	state = next_nor;
	if ( next_nor ==# 0 || next_nor ==# 1 )
	draw_state = 3;
	else if ( next_nor ==# 3 )
	draw_state = 2;
	else if ( next_nor ==# 4 )
	draw_state = 4;
	else if ( next_nor ==# 5 )
	draw_state = 1;
	else if ( next_nor ==# 6 )
	draw_state = 4;
	else draw_state = 0;


SCRIPT PREDOPK

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 0 || this_dis ==# 7 )
	draw_state = 2;
	else if ( sig_feature (SIGFEAT_USER3) )
	draw_state = 0;
	else draw_state = 1;


SCRIPT PREDOPT

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 0 || this_dis ==# 7 )
	draw_state = 1;
	else draw_state = 0;


SCRIPT PREDOPZ

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 0 || this_dis ==# 7 )
	draw_state = 1;
	else draw_state = 0;


SCRIPT PREDOP6

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	draw_state;

	float			this_dis;
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( this_dis ==# 0 || this_dis ==# 7 )
	draw_state = 1;
	else draw_state = 0;


SCRIPT PREDAB4/8

	extern float	this_sig_lr ();
	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			this_nor;
	float			next_nor;
	float			next_dis;
	float			next_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_dis = next_sig_lr (SIGFN_DISTANCE);
	next_rep = next_sig_lr (SIGFN_REPEATER);

	if ( this_nor ==# 0 || this_nor ==# 1 )
	state = 0;
	else if ( next_rep ==# 2 )
	state = next_dis;
	else
	{ 
		if ( next_nor ==# 0 || next_nor ==# 1 )
		state = 2;
		else if ( next_nor ==# 2 )
		state = 7;
		else state = next_nor;
	}
	

	draw_state = def_draw_state (state);


SCRIPT AB4OP

	extern float	this_sig_lr ();
	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			this_nor;
	float			next_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( this_nor ==# 0 || next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;

	draw_state = def_draw_state (state);


SCRIPT SKRYTA

	extern float	block_state ();
	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( block_state () ==# 2 )
	state = 0;
	else state = next_nor;

	draw_state = def_draw_state (state);


SCRIPT N160

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	this_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	float			this_dis;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else if ( sig_feature (SIGFEAT_USER2) ||
		( ( this_dis !=# -1 && next_nor !=# 7 ) &&
		next_nor !=# 2 ) || ( sig_feature (SIGFEAT_USER3) &&
		( next_nor ==# 2 || next_nor ># 4 ) ) )
	state = 2;
      else state = 7;

	draw_state = def_draw_state (state);


SCRIPT NM160

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER2) )
	state = 2;
	else if ( next_nor ==# 0 )
	state = 3;
	else state = 7;

	draw_state = def_draw_state (state);


SCRIPT N120SI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 6;

	draw_state = def_draw_state (state);


SCRIPT N100

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 6;

	draw_state = def_draw_state (state);


SCRIPT N80

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 5;

	draw_state = def_draw_state (state);


SCRIPT N60

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 4;

	draw_state = def_draw_state (state);


SCRIPT N50SI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N50BI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N40

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N30SI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N30BI

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT N30XX

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else if ( sig_feature (SIGFEAT_USER1) && next_nor ==# 1 )
	state = 1;
	else state = 3;

	draw_state = def_draw_state (state);


SCRIPT NPP

	extern float	enabled;
	extern float	route_set ();
	extern float	block_state ();
	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_inf;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_inf = next_sig_lr (SIGFN_INFO);

	if ( !enabled || !route_set () ||
		block_state () !=# 0 ||
		( next_nor != next_inf && next_inf !=# 7 ) )
	state = 0;
	else state = 1;

	draw_state = def_draw_state (state);


SCRIPT VLOZPOV

	extern float	enabled;
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( !enabled || !route_set () ||
		next_nor ==# 0 ||	block_state () !=# 0 )
	state = 0;
	else if ( next_nor ==# 1 )
	state = 1;
	else state = 7;

	draw_state = def_draw_state (state);


SCRIPT VLOZPOS

	extern float	enabled;
	extern float	route_set ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	if ( !enabled || !route_set () || block_state () ==# 2 ||
		( block_state () !=# 0 && !sig_feature (SIGFEAT_USER4) ) )
	state = 0;
	else state = 1;

	draw_state = def_draw_state (state);


SCRIPT ABLOK

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( block_state () !=# 0 )
	state = 0;
	else if ( next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;

	draw_state = def_draw_state (state);


SCRIPT A4BLOK

	extern float	next_sig_lr ();
	extern float	block_state ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	float			next_rep;
	next_nor = next_sig_lr (SIGFN_NORMAL);
	next_rep = next_sig_lr (SIGFN_REPEATER);

	if ( block_state () !=# 0 )
	state = 0;
	else if ( next_nor ==# 2 && next_rep ==# 2 )
	state = 2;
	else if ( next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;

	draw_state = def_draw_state (state);


SCRIPT NSTUJ

	extern float	state;
	extern float	draw_state;

	state = 0;
	draw_state = 0;


SCRIPT STURC

	extern float	state;
	extern float	draw_state;

	state = 0;
	draw_state = 0;


SCRIPT POSUN

	extern float	enabled;
	extern float	route_set ();
	extern float	block_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	if ( !enabled || !route_set () || block_state () ==# 2 ||
		( block_state () !=# 0 && !sig_feature (SIGFEAT_USER4) ) )
	state = 0;
	else state = 1;

	draw_state = def_draw_state (state);


SCRIPT NAV9A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_rep;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_rep = this_sig_lr (SIGFN_REPEATER);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_rep ==# -1 )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_rep ==# -1 )
			draw_state = 2;
			else draw_state = 3;
		}
		else
		{
			if ( this_rep ==# -1 )
			draw_state = 4;
			else draw_state = 5;
		}
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 15;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 6;
		else draw_state = 7;
	}
	else if ( this_nor ==# 4 )
	{
		if ( this_dis !=# -1 )
		draw_state = 8;
		else draw_state = 9;
	}
	else if ( this_nor ==# 5 )
	{
		if ( this_dis !=# -1 )
		draw_state = 10;
		else draw_state = 11;
	}
	else if ( this_nor ==# 6 )
	{
		if ( this_dis !=# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 14;
		else draw_state = 15;
	}
	else
	{
		state = 8;
		draw_state = 15;
	}


SCRIPT NAV7A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_rep;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_rep = this_sig_lr (SIGFN_REPEATER);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_rep ==# -1 )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_rep ==# -1 )
			draw_state = 2;
			else draw_state = 3;
		}
		else
		{
			if ( this_rep ==# -1 )
			draw_state = 4;
			else draw_state = 5;
		}
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 15;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 6;
		else draw_state = 7;
	}
	else if ( this_nor ==# 4 )
	{
		if ( this_dis !=# -1 )
		draw_state = 8;
		else draw_state = 9;
	}
	else if ( this_nor ==# 5 )
	{
		if ( this_dis !=# -1 )
		draw_state = 10;
		else draw_state = 11;
	}
	else if ( this_nor ==# 6 )
	{
		if ( this_dis !=# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 14;
		else draw_state = 15;
	}
	else
	{
		state = 8;
		draw_state = 15;
	}


SCRIPT NAV7R

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_rep;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_rep = this_sig_lr (SIGFN_REPEATER);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_rep ==# -1 )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_rep ==# -1 )
			draw_state = 2;
			else draw_state = 3;
		}
		else
		{
			if ( this_rep ==# -1 )
			draw_state = 4;
			else draw_state = 5;
		}
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 15;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 6;
		else draw_state = 7;
	}
	else if ( this_nor ==# 4 )
	{
		if ( this_dis !=# -1 )
		draw_state = 8;
		else draw_state = 9;
	}
	else if ( this_nor ==# 5 )
	{
		if ( this_dis !=# -1 )
		draw_state = 10;
		else draw_state = 11;
	}
	else if ( this_nor ==# 6 )
	{
		if ( this_dis !=# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 14;
		else draw_state = 15;
	}
	else
	{
		state = 8;
		draw_state = 15;
	}


SCRIPT NAV6A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_rep;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_rep = this_sig_lr (SIGFN_REPEATER);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 6;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 3;
		else draw_state = 4;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 5;
		else draw_state = 6;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV6R

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 6;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis ==# -1 )
		draw_state = 4;
		else draw_state = 3;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 5;
		else draw_state = 6;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV5T

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 6;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 3;
		else draw_state = 4;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 5;
		else draw_state = 6;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV5Z

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 6;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 3;
		else draw_state = 4;
	}
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 5;
		else draw_state = 6;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV4A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_dis ==# -1 || ( this_rep ==# -1 &&
			this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
		draw_state = 0;
		else if ( this_rep ==# -1 || sig_feature (SIGFEAT_USER3) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
				draw_state = 4;
			else
			{
				if ( this_rep ==# -1 )
				draw_state = 5;
				else if ( sig_feature (SIGFEAT_USER3) )
				draw_state = 3;
				else draw_state = 4;
			}
		}	
		else
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
				draw_state = 9;
			else
			{
				if ( this_rep ==# -1 )
				draw_state = 8;
				else if ( sig_feature (SIGFEAT_USER3) )
				draw_state = 6;
				else draw_state = 7;
			}
		}	
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 13;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis ==# -1 )
		draw_state = 11;
		else if ( this_rep ==# -1 || sig_feature (SIGFEAT_USER3) )
		draw_state = 10;
		else draw_state = 13;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else
	{
		state = 8;
		draw_state = 13;
	}


SCRIPT NAV4_2A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_dis ==# -1 || ( this_rep ==# -1
			&& this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
			draw_state = 2;
			else draw_state = 3;
		}	
		else
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
			draw_state = 4;
			else draw_state = 5;
		}	
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 15;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis ==# -1 )
		draw_state = 7;
		else draw_state = 6;
	}	
	else if ( this_nor ==# 4 )
	{
		if ( this_dis ==# -1 )
		draw_state = 9;
		else draw_state = 8;
	}	
	else if ( this_nor ==# 5 )
	{
		if ( this_dis ==# -1 )
		draw_state = 11;
		else draw_state = 10;
	}	
	else if ( this_nor ==# 6 )
	{
		if ( this_dis ==# -1 )
		draw_state = 13;
		else draw_state = 12;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 14;
		else draw_state = 15;
	}
	else
	{
		state = 8;
		draw_state = 15;
	}


SCRIPT NAV4R

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_dis ==# -1 || ( this_rep ==# -1 &&
			this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
		draw_state = 0;
		else if ( this_rep ==# -1 || sig_feature (SIGFEAT_USER3) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
				draw_state = 4;
			else
			{
				if ( this_rep ==# -1 )
				draw_state = 5;
				else if ( sig_feature (SIGFEAT_USER3) )
				draw_state = 3;
				else draw_state = 4;
			}
		}	
		else
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				this_dis !=# -1 && sig_feature (SIGFEAT_USER3) ) )
				draw_state = 9;
			else
			{
				if ( this_rep ==# -1 )
				draw_state = 8;
				else if ( sig_feature (SIGFEAT_USER3) )
				draw_state = 6;
				else draw_state = 7;
			}
		}	
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 13;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis ==# -1 )
		draw_state = 11;
		else if ( this_rep ==# -1 || sig_feature (SIGFEAT_USER3) )
		draw_state = 10;
		else draw_state = 13;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis ==# -1 )
		draw_state = 12;
		else draw_state = 13;
	}
	else
	{
		state = 8;
		draw_state = 13;
	}


SCRIPT NAV4T

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || sig_feature (SIGFEAT_USER3) )
				draw_state = 1;
				else draw_state = 2;
		}	
		else
		{
			if ( this_dis ==# -1 || sig_feature (SIGFEAT_USER3) )
				draw_state = 3;
				else draw_state = 4;
		}	
	}
	else if ( this_nor ==# 2 )
	{
		if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 8;
		else draw_state = 10;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 5;
		else if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 6;
		else draw_state = 7;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis !=# -1 )
		draw_state = 10;
		else if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 8;
		else draw_state = 9;
	}
	else
	{
		state = 8;
		draw_state = 10;
	}


SCRIPT NAV3

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	float			this_dis;
	float			this_rep;
	this_nor = this_sig_lr (SIGFN_NORMAL);
	this_dis = this_sig_lr (SIGFN_DISTANCE);
	this_rep = this_sig_lr (SIGFN_REPEATER);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( this_dis ==# -1 || ( this_rep ==# -1 &&
			sig_feature (SIGFEAT_USER3) ) )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				sig_feature (SIGFEAT_USER3) ) )
			draw_state = 3;
			else draw_state = 2;
		}	
		else
		{
			if ( this_dis ==# -1 || ( this_rep ==# -1 &&
				sig_feature (SIGFEAT_USER3) ) )
			draw_state = 5;
			else draw_state = 4;
		}	
	}
	else if ( this_nor ==# 2 )
	{
		if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 9;
		else draw_state = 11;
	}
	else if ( this_nor ==# 3 )
	{
		if ( this_dis !=# -1 )
		draw_state = 6;
		else if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 7;
		else draw_state = 8;
	}	
	else if ( this_nor ==# 7 )
	{
		if ( this_dis !=# -1 )
		draw_state = 11;
		else if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 9;
		else draw_state = 10;
	}
	else
	{
		state = 8;
		draw_state = 11;
	}


SCRIPT NAV2A

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( sig_feature (SIGFEAT_USER1) )
		draw_state = 0;
		else draw_state = 1;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 2;
		else draw_state = 3;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 4;
	}
	else if ( this_nor ==# 7 )
	{
		draw_state = 5;
	}
	else
	{
		state = 8;
		draw_state = 6;
	}


SCRIPT NAV2R

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		if ( !sig_feature (SIGFEAT_USER4) )
		draw_state = 1;
		else draw_state = 2;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 3;
	}
	else if ( this_nor ==# 7 )
	{
		draw_state = 4;
	}
	else
	{
		state = 8;
		draw_state = 5;
	}


SCRIPT NAVVLOZ

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		if ( sig_feature (SIGFEAT_USER3) )
		draw_state = 1;
		else draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		draw_state = 3;
	}
	else if ( this_nor ==# 7 )
	{
		draw_state = 2;
	}
	else
	{
		state = 8;
		draw_state = 4;
	}


SCRIPT PREDMECH

	extern float	next_sig_lr ();
	extern float	state;
	extern float	draw_state;
	extern float	def_draw_state ();

	float			next_nor;
	next_nor = next_sig_lr (SIGFN_NORMAL);

	if ( next_nor ==# 7 || next_nor ==# 2 )
	state = 7;
	else state = 2;

	draw_state = def_draw_state (state);


SCRIPT MECHRA1

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		draw_state = 3;
	}
	else if ( this_nor ==# 2 )
	{
		draw_state = 1;
	}
	else if ( this_nor ==# 3 )
	{
		if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 1;
		else draw_state = 2;
	}	
	else if ( this_nor ==# 7 )
	{
		draw_state = 2;
	}
	else
	{
		state = 8;
		draw_state = 4;
	}


SCRIPT MECHRA2

	extern float	this_sig_lr ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;

	if ( this_sig_lr (SIGFN_NORMAL) ==# 3 )
	{
		if ( sig_feature (SIGFEAT_USER2) )
		draw_state = 1;
		else draw_state = 2;
	}	
	else	draw_state = 0;


SCRIPT POSSV

	extern float	this_sig_lr ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		draw_state = 1;
	}
	else
	{
		state = 8;
		draw_state = 2;
	}


SCRIPT POSME

	extern float	this_sig_lr ();
	extern float	state;
	extern float	draw_state;

	float			this_nor;
	this_nor = this_sig_lr (SIGFN_NORMAL);

	state = this_nor;
	if ( this_nor ==# 0 )
	{
		draw_state = 0;
	}
	else if ( this_nor ==# 1 )
	{
		draw_state = 1;
	}
	else
	{
		state = 8;
		draw_state = 2;
	}


SCRIPT VYHNAV

	extern float	route_set ();
	extern float	draw_state;

	if ( route_set () )
	draw_state = 1;
	else draw_state = 0;


SCRIPT VYHZAV

	extern float	route_set ();
	extern float	draw_state;

	if ( route_set () )
	draw_state = 1;
	else draw_state = 0;


SCRIPT VYHANG

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () !=# 2 )
	draw_state = 0;
	else draw_state = 1;


SCRIPT VYKOL

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () ==# 2 )
	draw_state = 0;
	else draw_state = 1;


SCRIPT VYKNAV

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () ==# 2 )
	draw_state = 0;
	else draw_state = 1;


SCRIPT INDO

	extern float	this_sig_lr ();
	extern float	route_set ();
	extern float	draw_state;

	if ( !route_set () || this_sig_lr (SIGFN_NORMAL) ==# 0 )
	draw_state = 1;
	else draw_state = 0;


SCRIPT INDP

	extern float	this_sig_lr ();
	extern float	route_set ();
	extern float	draw_state;

	if ( !route_set () || this_sig_lr (SIGFN_NORMAL) ==# 0 )
	draw_state = 1;
	else draw_state = 0;




































///////////////////////////////////////////////////////////////////////////////
//
// Signal Type Logic Scripts
// for Microsoft Train Simulator
//
///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2003-2007 Timas S. Adamaitis
// All rights reserved
//
// Mailto: boxplace@yandex.ru
//
///////////////////////////////////////////////////////////////////////////////
//
// 3-light signals
//
// Stop - Cab White
// Stop_And_Proceed - Red 0
// Restricting - White (Shunter or Welcome) 20 or 25
// Approach_1 - Yellow 60
// Approach_2 - Two Yellow, Two Yellow with Flashing 40
// Approach_3 - Two Yellow with Green Bar 60
// Clear_1 - Other signals with Green Bar 80
// Clear_2 - Green, Green Flashing, Yellow Flashing
//
///////////////////////////////////////////////////////////////////////////////
//
// 4-light signals
//
// Stop - Cab White
// Stop_And_Proceed - Red 0
// Restricting - White (Shunter or Welcome) 25
// Approach_1 - Yellow 40
// Approach_2 - Two Yellow, Two Yellow with Flashing 40
// Approach_3 - Two Yellow with Green Bar 60
// Clear_1 - Other signals with Green Bar 80
// Clear_2 - Green, Green Flashing, Yellow Flashing, YellowGreen
//
///////////////////////////////////////////////////////////////////////////////

SCRIPT T_Stop_W

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_RESTRICTING;
	draw_state = def_draw_state (state);

SCRIPT T_Stop_R

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	draw_state = def_draw_state (state);

SCRIPT T_Signal_V

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_CLEAR_2;
	draw_state = def_draw_state (state);

SCRIPT T_Always_R

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP;
	if (enabled)
	{
		state = SIGASP_STOP_AND_PROCEED;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Always_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_CLEAR_2;
	draw_state = def_draw_state (state);

SCRIPT T_Head_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	next_state = next_sig_lr (SIGFN_NORMAL);
	if (next_state ># SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	next_state = next_sig_lr (SIGFN_NORMAL);
	if (next_state ># SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_GR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_STOP)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_GR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_WGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_WGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_GR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_GR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Gxx_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_GxG_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	next_state = next_sig_lr (SIGFN_NORMAL);
	if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
	}
	draw_state = def_draw_state (state);
	if (state >=# SIGASP_APPROACH_1)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 3;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 4;
		}
	}

SCRIPT T_Head_YRY

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_APPROACH_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_YRY

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_APPROACH_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_xR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YR_Gx_N

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = def_draw_state (state);
		if (enabled)
		{
			state = SIGASP_RESTRICTING;
			draw_state = def_draw_state (state);
			if (sig_feature (SIGFEAT_USER1))
			{
				draw_state = 3;
			}
			else if (sig_feature (SIGFEAT_USER2))
			{
				draw_state = 4;
			}
			else if (sig_feature (SIGFEAT_USER3))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_WRW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);
	if ((state ==# SIGASP_RESTRICTING) && (block_state() ==# BLOCK_CLEAR))
	{
		draw_state = 2;
	}

SCRIPT T_Small_WRW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);
	if ((state ==# SIGASP_RESTRICTING) && (block_state() ==# BLOCK_CLEAR))
	{
		draw_state = 2;
	}

SCRIPT T_Head_WBW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);
	if ((state ==# SIGASP_RESTRICTING) && (block_state() ==# BLOCK_CLEAR))
	{
		draw_state = 2;
	}

SCRIPT T_Small_WBW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);
	if ((state ==# SIGASP_RESTRICTING) && (block_state() ==# BLOCK_CLEAR))
	{
		draw_state = 2;
	}

SCRIPT T_Head_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if ((enabled || !sig_feature (SIGFEAT_USER1)) && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Back

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else if (next_state ==# SIGASP_STOP )
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YG_R

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YG_RW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_xxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGx_RxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yx_RW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_xxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yxx_RxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yx_RY_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_xGR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_xGR_xG_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YxR_Yx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Yx_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Yx_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YG_RY_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YG_RY_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yx_RY_x_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_Yx_RY_xx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_xGR_xG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YxR_Yx_x_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_Yx_xx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxR_YxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Yxx_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGR_Yxx_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxY_RY

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		else
		{
			state = SIGASP_APPROACH_2;
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_APPROACH_2)
		{
			if (block_state() !=# BLOCK_CLEAR)
			{
				draw_state = 5;
			}
			else if (next_state ># SIGASP_RESTRICTING)
			{
				draw_state = 3;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxY_RxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YxY_Rx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YGx_R

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}

SCRIPT T_Small_GR_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YGW_Rx

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YxW_Rx

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YGx_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YxY_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_GYx_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_GxG_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YRG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if ((enabled || !sig_feature (SIGFEAT_USER1)) && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YR_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_W

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_xxW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YR_xY_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_xRG_WG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_xRG_xG_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_YRx_xYW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_xY_x_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_xY_xx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xYx_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_2;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xYx_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_2;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xY_G

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_2;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRG_xY_GG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_2;
			}
			else
			{
				state = SIGASP_CLEAR_1;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_CLEAR_1) && (next_state ==# SIGASP_APPROACH_2))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_YxY

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		else
		{
			state = SIGASP_APPROACH_2;
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_APPROACH_2)
		{
			if (block_state() !=# BLOCK_CLEAR)
			{
				draw_state = 5;
			}
			else if (next_state ># SIGASP_RESTRICTING)
			{
				draw_state = 3;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_YRx_Yxx_I

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YRG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_1)
		{
			draw_state = 2;
		}
		else if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 5;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 6;
		}
	}

SCRIPT T_Small_YxG_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_1)
		{
			draw_state = 2;
		}
		else if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 5;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 6;
		}
	}

SCRIPT T_Small_xRx_YWG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_YRY_xWx

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_GRG_xWx

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_Left

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_Right

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_-

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_1

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_2

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_3

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_4

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_5

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_6

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_7

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_8

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_9

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_0

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_Route_10

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_Left

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_Right

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_-

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_1

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_2

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_3

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_4

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_5

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_6

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_7

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_8

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_9

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_0

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_Route_10

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (route_set() && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if (next_state !=# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Route

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float		next_state;

	state = SIGASP_CLEAR_2;
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_WGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_GR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Head_PS45_YG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	next_state = next_sig_lr (SIGFN_NORMAL);
	if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
	}
	draw_state = def_draw_state (state);
	if (state >=# SIGASP_APPROACH_1)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 3;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 4;
		}
	}

SCRIPT T_Head_PS45_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if ((enabled || !sig_feature (SIGFEAT_USER1)) && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}

SCRIPT T_Head_PS45_YGR_W

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 6;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_PS45_YxR_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 4;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Head_PS45_xGR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Small_PS45_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_PS45_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_PS45_WGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_PS45_GR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Small_PS45_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}

SCRIPT T_Tunnel_WR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
	}
	draw_state = def_draw_state (state);

SCRIPT T_Tunnel_WB

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((block_state() ==# BLOCK_OCCUPIED) || (next_state ==# SIGASP_STOP) || (next_state ==# SIGASP_RESTRICTING) || (next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
		{
			state = SIGASP_RESTRICTING;
		}
	}
	draw_state = def_draw_state (state);

SCRIPT T_Tunnel_YGR

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}
	else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
	{
		draw_state = 3;
	}

SCRIPT T_Tunnel_YRG

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_1)
		{
			draw_state = 2;
		}
		else if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 5;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 6;
		}
	}
	else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
	{
		draw_state = 7;
	}

SCRIPT T_Tunnel_YG_RW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 6;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_Yx_RW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YR_GW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 7;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YGR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 4;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 5;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 6;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YxR_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 4;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YxR_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YRG_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
			{
				state = SIGASP_APPROACH_1;
			}
			else
			{
				state = SIGASP_CLEAR_2;
			}
		}
		draw_state = def_draw_state (state);
		if (state ==# SIGASP_CLEAR_2)
		{
			if (next_state ==# SIGASP_APPROACH_1)
			{
				draw_state = 2;
			}
			else if (next_state ==# SIGASP_APPROACH_2)
			{
				draw_state = 5;
			}
			else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
			{
				draw_state = 6;
			}
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 7;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YRx_YW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state >=# SIGASP_APPROACH_1) && (next_state ># SIGASP_RESTRICTING))
		{
			draw_state = 3;
		}
		else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 4;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YRx_xW

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	if (route_set())
	{
		state = SIGASP_STOP_AND_PROCEED;
		if (enabled && (block_state() ==# BLOCK_CLEAR))
		{
			next_state = next_sig_lr (SIGFN_NORMAL);
			if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
			{
				state = SIGASP_RESTRICTING;
			}
			else
			{
				state = SIGASP_APPROACH_2;
			}
		}
		draw_state = def_draw_state (state);
		if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
		{
			draw_state = 3;
		}
	}
	else
	{
		state = SIGASP_STOP;
		if (block_state() ==# BLOCK_JN_OBSTRUCTED)
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		draw_state = def_draw_state (state);
	}

SCRIPT T_Tunnel_YGR_Repeater

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 4;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 5;
		}
	}
	else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
	{
		draw_state = 3;
	}

SCRIPT T_Tunnel_YRG_Repeater

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature ();
	float		next_state;

	state = SIGASP_STOP_AND_PROCEED;
	if (enabled && (block_state() ==# BLOCK_CLEAR))
	{
		next_state = next_sig_lr (SIGFN_NORMAL);
		if ((next_state ==# SIGASP_STOP) || ((next_sig_mr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) && (next_state ==# SIGASP_RESTRICTING)))
		{
			state = SIGASP_RESTRICTING;
		}
		else if ((next_state ==# SIGASP_STOP_AND_PROCEED) || (next_state ==# SIGASP_RESTRICTING))
		{
			state = SIGASP_APPROACH_1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
		}
	}
	draw_state = def_draw_state (state);
	if (state ==# SIGASP_CLEAR_2)
	{
		if (next_state ==# SIGASP_APPROACH_1)
		{
			draw_state = 2;
		}
		else if (next_state ==# SIGASP_APPROACH_2)
		{
			draw_state = 5;
		}
		else if ((next_state ==# SIGASP_APPROACH_3) || (next_state ==# SIGASP_CLEAR_1))
		{
			draw_state = 6;
		}
	}
	else if ((state ==# SIGASP_RESTRICTING) && sig_feature (SIGFEAT_USER1))
	{
		draw_state = 7;
	}










































//------------------------------------------------------------
//
// Created by SigMexx V1.4.3
//
// contains following scripts:
//	- Alak_Bejelz
//	- Alak_E11
//	- Alak_E12
//	- Alak_E21
//	- Alak_E22
//	- Alak_F11
//	- Alak_F21
//	- Alak_Kijelz
//	- Elojelzo
//	- Indikator80
//	- Terkoz
//	- 3f_AT_cs
//	- 3F_Max40Hi_cs
//	- 4f_Max40Hi_cs
//	- 0F_INFO
//	- 0F_BEALLITO
//	- 0F_TH
//	- 0F_VZ
//	- AS
//	- AS2
//	- ALAK_E
//	- BK_Vr_DB_2Flg_1
//	- BK_Vr_DB_2Flg_2
//	- ALAK_F1
//	- ALAK_F1NB
//	- ALAK_F2A
//	- ALAK_F2B
//	- 0F_FELOLDO
//	- 1F_T
//	- 1F_VT
//	- 1F_H
//	- 2f_At
//	- 2F_TT
//	- 2F_TT_Ru
//	- 2F_T
//	- 2F_TNB
//	- 2F_E
//	- 2F_ENB
//	- 2FS
//	- 2FS_NB
//	- 2F
//	- 3F_Max40Hi_71_kij
//	- 2F_Hi
//	- 3F_AT
//	- 3FK_AT
//	- 3F_IT_A
//	- 3F_IT_B
//	- 3F_FIT
//	- 3F_Max40Hi
//	- 3F_Max40Hi_71_sarga
//	- 3F_Max40
//	- 3F_Max40HiT
//	- 3F_Max80Hi
//	- 3FS_Max40Hi
//	- 3FS_Max4015
//	- 3FSK_Max40Hi
//	- 3FS_Max40HiT
//	- 4F_I
//	- 4F_I_Ru
//	- 4FJelR_ISM
//	- 4F_AT
//	- 4FR_AT
//	- 4F_IT_A
//	- 4F_IT_B
//	- 4F_FIT
//	- 4F_Max40
//	- 4F_Max40Hi
//	- 4F_Max40HiVO
//	- 4F_Max40HiT
//	- 2F_T_ru
//	- 2F_Ru
//	- 2F_E_Ru
//	- 3F_Max40Hi_Ru
//	- 4F_Max40HiT_ru
//	- 4FR_Max40Hi
//	- 4F_Max8040Hi
//	- 4F_Max8040HiT
//	- 4F_Max40HiSi
//	- 4F_Max40HiSiT
//	- 4F_Max12040Hi
//	- 4F_Max12040HiVO
//	- 4F_Max1208040HiVO
//	- 3F_GYVZ_120
//	- 4F_GYVZ_120
//	- INFO_Max
//	- INFO_120
//	- INFO_80
//	- INFO_40
//	- INFO_SHUNT
//	- INFO_HIVO
//	- VALTO_HM
//	- VALTO_HM_I
//	- VALTO_HM_I2
//	- VS_I
//	- VS
//	- 2F_TT_F
//	- 2F_TT_RuF
//	- ASF
//	- Alak_TNB
//	- 4F_Max40_KT
//	- 2f_Janus_A
//	- 3f_Janus_A
//	- 2F_Elojelzo
//	- 2f_Janus_B
//	- 3f_Janus_B

//------------------------------------------------------------
SCRIPT Alak_Bejelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;

	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 &&
		!sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_CLEAR_1;
	else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
		state = SIGASP_APPROACH_3;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT Alak_E11

	extern float next_sig_lr();
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E12

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;

	if ((this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1
	)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E21

	extern float next_sig_lr();
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E22

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;

	if ((this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_F11

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		draw_state = 0;
	else
		draw_state = 1;

//------------------------------------------------------------
SCRIPT Alak_F21

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_Kijelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;

	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2)))
	)
		state = SIGASP_CLEAR_1;
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	)
		state = SIGASP_APPROACH_3;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT Elojelzo

	extern float block_state();
	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;

	state = SIGASP_CLEAR_1;
	if (enabled && block_state() ==# BLOCK_CLEAR)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else
			state = SIGASP_STOP;
	}
	else if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT Indikator80

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Terkoz

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float state;
	extern float enabled;

	state = SIGASP_STOP;
	if (block_state() ==# BLOCK_CLEAR &&
		enabled &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_CLEAR_1;
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else
			state = SIGASP_STOP;
	}
	else if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 3f_AT_cs

	extern float block_state();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (enabled)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			draw_state = 3;
	}
	else
	{
		state = SIGASP_STOP;
		draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((!sig_feature(SIGFEAT_USER1) &&
		!sig_feature(SIGFEAT_USER2)) ||
		(!route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else
			draw_state = 5;
	}
	else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE)))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4f_Max40Hi_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 &&
		!sig_feature(SIGFEAT_USER1)) ||
		(!route_set() &&
		!sig_feature(SIGFEAT_USER1)) ||
		(!sig_feature(SIGFEAT_USER1) &&
		!sig_feature(SIGFEAT_USER2)))
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			sig_feature(SIGFEAT_GRADIENT_PLATE))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
				(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
				next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
				(sig_feature(SIGFEAT_NUMBER_PLATE) ||
				sig_feature(SIGFEAT_USER4)))
			)
				draw_state = 5;
			else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
				(sig_feature(SIGFEAT_NUMBER_PLATE) ||
				sig_feature(SIGFEAT_USER4))) ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				draw_state = 6;
			else
				draw_state = 7;
		}
	}
	else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 2;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 3;
		else
			draw_state = 4;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 0F_INFO

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
		state = SIGASP_CLEAR_1;
	else if (sig_feature(SIGFEAT_USER4) && sig_feature(SIGFEAT_NUMBER_PLATE))
		state = next_sig_lr(SIGFN_DISTANCE);
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BEALLITO

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	this_sig_lr ();
	extern float	dist_multi_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature();
	float			next_state;
	float			this_state;

	next_state = next_sig_lr (SIGFN_NORMAL);
	this_state = this_sig_lr (SIGFN_INFO);

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED )
	{
		state = SIGASP_STOP;
	}
	else if ( sig_feature (SIGFEAT_NUMBER_PLATE) && next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP )
	{
		state = SIGASP_STOP;
	}
	else if ( sig_feature (SIGFEAT_NUMBER_PLATE) && next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING )
	{
		state = SIGASP_RESTRICTING;
	}
	else if ( route_set () )
	{
		if ( sig_feature (SIGFEAT_USER3) )
		{
			state = SIGASP_RESTRICTING;
		}
		else if ( block_state () !=# BLOCK_CLEAR )
		{
			state = SIGASP_STOP;
		}
		else if ( sig_feature (SIGFEAT_USER1) && sig_feature (SIGFEAT_USER2) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if ( sig_feature (SIGFEAT_USER1) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if ( sig_feature (SIGFEAT_USER2) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
	}
	else										// Több útvonal van
	{
		if (this_state ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)					// INFO_Max
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = next_sig_lr (SIGFN_NORMAL);					// Akkor Max-ig
			}
		}
		else if (this_state ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)				// INFO_Max ???
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = next_sig_lr (SIGFN_NORMAL);					// Akkor Max-ig
			}
		}
		else if (this_state ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)					// INFO_40
		{									// Akkor 40-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)					// INFO_80
		{									// Akkor 80-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)					// INFO_120
		{									// Akkor 120-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_RESTRICTING)				// INFO_SHUNT
		{
			state = SIGASP_RESTRICTING;
		}
		else if (this_state ==# SIGASP_STOP_AND_PROCEED )			// INFO_HIVO
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		else if (sig_feature ( SIGFEAT_GRADIENT_PLATE ) )			// További útvonal tolatásra
		{
			state = SIGASP_RESTRICTING;			
		}
		else if ( block_state () !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	return;

//------------------------------------------------------------
SCRIPT 0F_TH

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR ||
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP;
	else
		state = next_sig_lr(SIGFN_NORMAL);
	return;

//------------------------------------------------------------
SCRIPT 0F_VZ

	extern float state;

	state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT AS

	extern float draw_state;
	extern float state;

	state = SIGASP_CLEAR_2;
	draw_state = 1;

//------------------------------------------------------------
SCRIPT AS2

	extern float draw_state;
	extern float enabled;

	if (enabled)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT ALAK_E

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = next_sig_lr(SIGFN_NORMAL);
	if (block_state() !=# BLOCK_CLEAR || !enabled)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_1

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_2

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F1NB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F2A

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F2B

	extern float block_state();
	extern float sig_feature();
	extern float this_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 0;
	if (!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		block_state() !=# BLOCK_CLEAR
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 0F_FELOLDO

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_lr ();
	extern float	dist_multi_sig_mr ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	extern float	sig_feature();
	float			next_state;
	float			this_state;

	next_state = next_sig_lr (SIGFN_NORMAL);
	this_state = this_sig_lr (SIGFN_INFO);

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED )
	{
		state = SIGASP_STOP;
	}
	else if ( sig_feature (SIGFEAT_NUMBER_PLATE) && next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP )
	{
		state = SIGASP_STOP_AND_PROCEED;
	}
	else if ( sig_feature (SIGFEAT_NUMBER_PLATE) && next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING )
	{
		state = SIGASP_RESTRICTING;
	}
	else if ( route_set () )
	{
		if ( sig_feature (SIGFEAT_USER3) )
		{
			state = SIGASP_RESTRICTING;
		}
		else if ( block_state () !=# BLOCK_CLEAR )
		{
			state = SIGASP_STOP;
		}
		else if ( sig_feature (SIGFEAT_USER1) && sig_feature (SIGFEAT_USER2) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if ( sig_feature (SIGFEAT_USER1) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if ( sig_feature (SIGFEAT_USER2) )
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)
			{
				state = SIGASP_CLEAR_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
	}
	else										// Több útvonal van
	{
		if (this_state ==# SIGASP_CLEAR_1 && block_state () ==# BLOCK_CLEAR)					// INFO_Max
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = next_sig_lr (SIGFN_NORMAL);					// Akkor Max-ig
			}
		}
		else if (this_state ==# SIGASP_CLEAR_2 && block_state () ==# BLOCK_CLEAR)				// INFO_Max ???
		{
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = next_sig_lr (SIGFN_NORMAL);					// Akkor Max-ig
			}
		}
		else if (this_state ==# SIGASP_APPROACH_3 && block_state () ==# BLOCK_CLEAR)					// INFO_40
		{									// Akkor 40-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_APPROACH_2 && block_state () ==# BLOCK_CLEAR)					// INFO_80
		{									// Akkor 80-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_APPROACH_1 && block_state () ==# BLOCK_CLEAR)					// INFO_120
		{									// Akkor 120-ig
			if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_2;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else if ( next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED || next_sig_lr (SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_STOP_AND_PROCEED;
			}
			else
			{
				state = SIGASP_STOP;
			}
		}
		else if (this_state ==# SIGASP_RESTRICTING)				// INFO_SHUNT
		{
			state = SIGASP_RESTRICTING;
		}
		else if (this_state ==# SIGASP_STOP_AND_PROCEED )			// INFO_HIVO
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
		else if (sig_feature ( SIGFEAT_GRADIENT_PLATE ) )			// További útvonal tolatásra
		{
			state = SIGASP_RESTRICTING;			
		}
		else if ( block_state () !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
		}
	}
	return;

//------------------------------------------------------------
SCRIPT 1F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		block_state() !=# BLOCK_CLEAR ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		draw_state = 1;
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_RESTRICTING;
	}

//------------------------------------------------------------
SCRIPT 1F_VT

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 1F_H

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		block_state() !=# BLOCK_CLEAR ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2f_At

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 2F_TT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TNB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_E

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 2;
	if (block_state() !=# BLOCK_CLEAR || !enabled)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 0;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F_ENB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 2;
	if (block_state() !=# BLOCK_CLEAR || !enabled)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 0;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2FS

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 2FS_NB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 2F

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_kij

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 2F_Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 3F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3FK_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_number_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_B

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 5;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 6;
		else
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
			draw_state = 7;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_sarga

	extern float block_state();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
		block_state() ==# BLOCK_CLEAR &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT 3F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 5;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 6;
		else
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
			draw_state = 7;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 3F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 5;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 6;
		else
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
			draw_state = 7;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max80Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 &&
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		(sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_2;
		draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3FS_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 ||
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 3FS_Max4015

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 ||
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3FSK_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 ||
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3FS_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 ||
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_I

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 4F_I_Ru

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 4FJelR_ISM

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 4F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4FR_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4F_IT_B

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float opp_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		(opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (!sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!enabled &&
		opp_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (!enabled &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 5;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F_T_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		(sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 2F_E_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 2;
	if (block_state() !=# BLOCK_CLEAR || !enabled)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 0;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 5;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 6;
		else
			draw_state = 4;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
			draw_state = 7;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiT_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4FR_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_GRADIENT_PLATE)))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max8040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 11;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 12;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 13;
		else
			draw_state = 14;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_APPROACH_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 7;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 8;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER2) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 4;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max8040HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 11;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 12;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 13;
		else
			draw_state = 14;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_APPROACH_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 7;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 8;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER2) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP))
	{
		state = SIGASP_APPROACH_3;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 4;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4)))
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiSi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40HiSiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else
			draw_state = 10;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2 &&
			(sig_feature(SIGFEAT_NUMBER_PLATE) ||
			sig_feature(SIGFEAT_USER4))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max12040Hi

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_2;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_1 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max12040HiVO

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_2;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_1 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max1208040HiVO

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_1;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 10;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 9;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_1;
							draw_state = 7;
						}
					}
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					{
						if (has_gradient_plate)
						{
							state = SIGASP_APPROACH_3;
							draw_state = 3;
						}
						else
						{
							state = SIGASP_APPROACH_2;
							draw_state = 7;
						}
					}
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 10;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 9;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_1;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				if (has_gradient_plate)
				{
					state = SIGASP_APPROACH_3;
					draw_state = 3;
				}
				else
				{
					state = SIGASP_APPROACH_1;
					draw_state = 7;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 14;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 15;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 13;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 12;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 11;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 14;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 15;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 13;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 12;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 11;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_2 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_2;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 20;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 20;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 19;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 18;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 17;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_2;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 20;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 20;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 19;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 18;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 17;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_APPROACH_2;
						draw_state = 16;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 20;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 20;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 19;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 18;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_2;
			draw_state = 17;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_2;
				draw_state = 16;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_2;
				draw_state = 16;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_APPROACH_2;
				draw_state = 16;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 0;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 0;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 0;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 22;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 22;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 22;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 22;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_GYVZ_120

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_GYVZ_120

	extern float block_state();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 0;
		}
	}
	else
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT INFO_Max

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_CLEAR_1;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT INFO_120

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_1;

//------------------------------------------------------------
SCRIPT INFO_80

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_APPROACH_2;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT INFO_40

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_APPROACH_3;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT INFO_SHUNT

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT INFO_HIVO

	extern float route_set();
	extern float state;

	if (route_set())
		state = SIGASP_STOP_AND_PROCEED;
	else
		state = SIGASP_STOP;

//------------------------------------------------------------
SCRIPT VALTO_HM

	extern float route_set();
	extern float draw_state;
	extern float state;

	if (route_set())
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;
	extern float state;

	state = next_sig_lr(SIGFN_INFO);
	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I2

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;
	extern float state;

	state = next_sig_lr(SIGFN_INFO);
	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VS_I

	extern float draw_state;
	extern float state;
	extern float enabled;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	return;

//------------------------------------------------------------
SCRIPT VS

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float this_sig_lr();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if ((!enabled &&
		this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 1;
	}
	return;
	return;

//------------------------------------------------------------
SCRIPT 2F_TT_F

	extern float state;

	state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_TT_RuF

	extern float state;

	state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT ASF

	extern float state;
	extern float enabled;
	extern float draw_state;

	state = SIGASP_CLEAR_1;
	if (enabled)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40_KT

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 6;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 5;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
						draw_state = 4;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
						draw_state = 3;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
						draw_state = 3;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 6;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 6;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 5;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 5;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 4;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 10;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 9;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
				{
					if (has_gradient_plate)
					{
						state = SIGASP_APPROACH_3;
						draw_state = 3;
					}
					else
					{
						state = SIGASP_CLEAR_1;
						draw_state = 7;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 10;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 9;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (has_gradient_plate)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 3;
			}
			else
			{
				state = SIGASP_CLEAR_1;
				draw_state = 7;
			}
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	state = SIGASP_STOP;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 1;
		}
		else
			draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 2;
		}
	}
	else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_A

	extern float block_state();
	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	state = SIGASP_STOP;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
			)
				draw_state = 1;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
				draw_state = 4;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
		}
		else
			draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}
	else if (sig_feature(SIGFEAT_USER1) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else if (!sig_feature(SIGFEAT_USER1) || !sig_feature(SIGFEAT_USER2))
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT 2F_Elojelzo

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float this_sig_lr();
	extern float state;
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_2;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 0;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			(sig_feature(SIGFEAT_USER1) ||
			sig_feature(SIGFEAT_USER2))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 4;
		}
		else
		{
			state = SIGASP_STOP;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 1;
			else
				draw_state = 0;
		}
	}
	else if (sig_feature(SIGFEAT_USER1) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER2) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		draw_state = 0;
		state = SIGASP_STOP_AND_PROCEED;
	}
	else if (!sig_feature(SIGFEAT_USER1) || !sig_feature(SIGFEAT_USER2))
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_B

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 2;
	state = SIGASP_STOP_AND_PROCEED;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 1;
		}
		else
			draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 2;
		}
	}
	else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float this_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	draw_state = 5;
	state = SIGASP_STOP_AND_PROCEED;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
				draw_state = 4;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
				draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			!enabled &&
			(sig_feature(SIGFEAT_USER1) ||
			sig_feature(SIGFEAT_USER2)))
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}
	else if (sig_feature(SIGFEAT_USER2) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		draw_state = 0;
		state = SIGASP_STOP_AND_PROCEED;
	}
	else if (!sig_feature(SIGFEAT_USER1) || !sig_feature(SIGFEAT_USER2))
	{
		if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
	}


















///////////////////////////////////////////////////////////////////////////////
// Signal Type Logic Scripts
//


///////////////////////////////////////////////////////////////////////////////

SCRIPT TM_KSZT

//Skrypt tarczy manewrowej ksztaltowek

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_lr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( !enabled ) 
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_RESTRICTING; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT OSKSZT_3_GRN

//Tarczy ostrzegawczej ksztaltowej trzystawnej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_2 ) 	

	{ state = SIGASP_CLEAR_2; }
else
	{ state = SIGASP_APPROACH_1; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT OSKSZT_3_DLN

//Tarczy "strzaly" w ostrzegawczej ksztaltowej trzystawnej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 ) 	

	{ state = SIGASP_APPROACH_2; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT OSKSZT_2

//Tarczy tarczy ostrzegawczej ksztaltowej dwustawnej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	float			next_state;
	//float			czy_na_bok;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( 	next_state ==# SIGASP_STOP ||
	next_state ==# SIGASP_STOP_AND_PROCEED ) 	
	{ state = SIGASP_APPROACH_1; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT SEMKSZT_1

//Skrypt semafora ksztaltowego jednoramiennego

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if (  !enabled ||				   				//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 				//blok zajety
	next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT SEMKSZT_2_GRN

//Skrypt gornego ramienia semafora 2-ramiennnego ksztaltowego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			this_state;
	//float			next_state;
	//float			ziel_mig_czter;

this_state = this_sig_mr ( SIGFN_NORMAL );
if ( this_state ==# SIGASP_STOP || this_state ==# SIGASP_STOP_AND_PROCEED 
	|| this_state ==# SIGASP_RESTRICTING )
	{ state = SIGASP_STOP; }  //podajemy czerwone
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEMKSZT_2_DLN

//Skrypt dolnego ramienia semafora 2-ramienneg ksztaltowego

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;

	if ( !enabled ||
		block_state() ==# BLOCK_OCCUPIED ||
		next_sig_mr (SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 
		{ state = SIGASP_STOP; }
	else
		{
		if ( 
			(!route_set() ) 
			|| ( !sig_feature( SIGFEAT_USER1 ) ) 
		   )
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_CLEAR_2; }
		}
	
draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT RESET

//Skrypt wskaznika w5

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_na_bok;


if ( !enabled || block_state() ==# BLOCK_OCCUPIED ) 
	{ state = SIGASP_CLEAR_1; }
else
	{	
		if ( sig_feature ( SIGFEAT_USER1 ) )
			{ 
			next_state = next_sig_mr ( SIGFN_NORMAL ); 
			if ( next_state ==# SIGASP_STOP ) 
				{ state = SIGASP_STOP_AND_PROCEED; }
			else
				{ state = next_state; }
			}
		else
			{ state = SIGASP_CLEAR_2; }
	}

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT TMAN

//Skrypt tarczy manewrowej

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_lr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( !enabled ) 
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_RESTRICTING; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT TMAN_KARZ

//Skrypt tarczy manewrowej karzelkowej

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_lr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if ( !enabled ) 
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_RESTRICTING; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT POWT

//Skrypt semafora powtarzajacego

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
		if ( next_state ==# SIGASP_APPROACH_1 ) //czy zolte mig.
			{ state = SIGASP_APPROACH_2; }
		else 
			{
			if (next_state ==# SIGASP_APPROACH_2 ) //czy zielone mig.
				{state = SIGASP_APPROACH_3;}
			else 
				{state = SIGASP_CLEAR_2;} //zielone
			}
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

SCRIPT POWT-2

//Skrypt semafora powtarzajacego 2-kom

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
		if ( next_state ==# SIGASP_APPROACH_1 ) //czy zolte mig.
			{ state = SIGASP_APPROACH_2; }
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

SCRIPT OS

//Skrypt tarczy ostrzegawczej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
		if ( next_state ==# SIGASP_APPROACH_1 ) //czy zolte mig.
			{ state = SIGASP_APPROACH_2; }
		else 
			{
			if (next_state ==# SIGASP_APPROACH_2 ) //czy zielone mig.
				{state = SIGASP_APPROACH_3;}
			else 
				{state = SIGASP_CLEAR_2;} //zielone
			}
	}

draw_state = def_draw_state (state);


SCRIPT OSw

//Skrypt tarczy ostrzegawczej na bramke

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
		if ( next_state ==# SIGASP_APPROACH_1 ) //czy zolte mig.
			{ state = SIGASP_APPROACH_2; }
		else 
			{
			if (next_state ==# SIGASP_APPROACH_2 ) //czy zielone mig.
				{state = SIGASP_APPROACH_3;}
			else 
				{state = SIGASP_CLEAR_2;} //zielone
			}
	}

draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

SCRIPT OS_1

//Skrypt tarczy ostrzegawczej jednokomorowej

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float			next_state_dist;
	//float			this_signal;

next_state = next_sig_mr ( SIGFN_NORMAL );
if ( next_state ==# SIGASP_STOP || next_state ==# SIGASP_STOP_AND_PROCEED )  //czy zolte
	{ state = SIGASP_APPROACH_1; }
else
	{
	state = SIGASP_APPROACH_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT SBL_DLN

//Skrypt zasadniczej czesci semfora SBL

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_na_bok;

	
	if ( block_state() ==# BLOCK_OCCUPIED) 
		{ state = SIGASP_STOP; }
	else
		{
		next_state = next_sig_mr ( SIGFN_NORMAL );
		if ( next_state ==# SIGASP_STOP ||
		     next_state ==# SIGASP_STOP_AND_PROCEED )
				{ state = SIGASP_APPROACH_2; } //podajemy zolte
		else //sprawdzamy czy podac zielone migajace
			{
			if ( sig_feature( SIGFEAT_USER1 ) && next_state ==# SIGASP_APPROACH_2 )
				{ state = SIGASP_APPROACH_3;}
			else
				{ state = SIGASP_CLEAR_2; }
			}
		}
	
draw_state = def_draw_state ( state );
if ( state ==# SIGASP_CLEAR_2 && (!enabled ) )
	{draw_state = 1; } 


SCRIPT SBL_DLNw

//Skrypt zasadniczej czesci semfora SBL

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_na_bok;

	
	if ( block_state() ==# BLOCK_OCCUPIED) 
		{ state = SIGASP_STOP; }
	else
		{
		next_state = next_sig_mr ( SIGFN_NORMAL );
		if ( next_state ==# SIGASP_STOP ||
		     next_state ==# SIGASP_STOP_AND_PROCEED )
				{ state = SIGASP_APPROACH_2; } //podajemy zolte
		else //sprawdzamy czy podac zielone migajace
			{
			if ( sig_feature( SIGFEAT_USER1 ) && next_state ==# SIGASP_APPROACH_2 )
				{ state = SIGASP_APPROACH_3;}
			else
				{ state = SIGASP_CLEAR_2; }
			}
		}
	
draw_state = def_draw_state ( state );
if ( state ==# SIGASP_CLEAR_2 && (!enabled ) )
	{draw_state = 1; } 


///////////////////////////////////////////////////////////////////////////////

SCRIPT SBL_GRN

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			this_state;
	float			next_state;
	float			ziel_mig_czter;

this_state = this_sig_mr ( SIGFN_NORMAL );
if ( this_state ==# SIGASP_STOP || this_state ==# SIGASP_STOP_AND_PROCEED 
	|| this_state ==# SIGASP_RESTRICTING )
	{ state = SIGASP_STOP; }  //podajemy puste
else
	{
	if ( this_state ==# SIGASP_APPROACH_2 )
		{ state = SIGASP_APPROACH_1; } //podajemy zolte
	else 
		{
		if ( this_state ==# SIGASP_APPROACH_3 )
			{ state = SIGASP_APPROACH_3; } //podajemy zielone migajace
		else //wiemy, ze tu jest jazda na max
			{
			if ( next_sig_mr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 )
				{ state = SIGASP_APPROACH_2; } //podajemy zolte migajace
			else
				{ state = SIGASP_CLEAR_2;} //podajemy zielone
			}
		}	
	}

draw_state = def_draw_state (state);


SCRIPT SBL_GRNw

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			this_state;
	float			next_state;
	float			ziel_mig_czter;

this_state = this_sig_mr ( SIGFN_NORMAL );
if ( this_state ==# SIGASP_STOP || this_state ==# SIGASP_STOP_AND_PROCEED 
	|| this_state ==# SIGASP_RESTRICTING )
	{ state = SIGASP_STOP; }  //podajemy puste
else
	{
	if ( this_state ==# SIGASP_APPROACH_2 )
		{ state = SIGASP_APPROACH_1; } //podajemy zolte
	else 
		{
		if ( this_state ==# SIGASP_APPROACH_3 )
			{ state = SIGASP_APPROACH_3; } //podajemy zielone migajace
		else //wiemy, ze tu jest jazda na max
			{
			if ( next_sig_mr (SIGFN_NORMAL) ==# SIGASP_APPROACH_1 )
				{ state = SIGASP_APPROACH_2; } //podajemy zolte migajace
			else
				{ state = SIGASP_CLEAR_2;} //podajemy zielone
			}
		}	
	}

draw_state = def_draw_state (state);




///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_1

//Skrypt sygnalu zamkniecia toru

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_lr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


state = SIGASP_STOP;

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_CB

//Skrypt semafora dwukomorowego czerwone + biale

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_stop;


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  
	!enabled ||				   		//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 		//blok zajety
	next_state  ==# SIGASP_CLEAR_1  		//reset pokazuje zajetosc bloku 
   ) 						
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_STOP_AND_PROCEED; }

if ( sig_feature( SIGFEAT_USER1 ) )
	{ 
	if ( next_state ==# SIGASP_STOP )
		{ state = SIGASP_STOP;}
	else
		{ state = SIGASP_STOP_AND_PROCEED; }
	}
draw_state = def_draw_state ( state );
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_SZ2N

//Skrypt semafora dwukomorowego - sygnalu zastepczego

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_stop;


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  
	!enabled ||				   		//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 		//blok zajety
	next_state  ==# SIGASP_CLEAR_1  		//reset pokazuje zajetosc bloku 
   ) 						
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_STOP_AND_PROCEED; }

if ( sig_feature( SIGFEAT_USER1 ) )
	{ 
	if ( next_state ==# SIGASP_STOP )
		{ state = SIGASP_STOP;}
	else
		{ state = SIGASP_STOP_AND_PROCEED; }
	}
draw_state = def_draw_state ( state );

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_CB_KARZ

//Skrypt semafora dwukomorowego czerwone + biale

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	float			next_state;
	//float			czy_na_bok;


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  
	!enabled ||				   		//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 		//blok zajety
	next_state  ==# SIGASP_CLEAR_1  		//reset pokazuje zajetosc bloku 
   ) 						
	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_STOP_AND_PROCEED; }

if ( sig_feature( SIGFEAT_USER1 ) )
	{ 
	if ( next_state ==# SIGASP_STOP )
		{ state = SIGASP_STOP;}
	else
		{ state = SIGASP_STOP_AND_PROCEED; }
	}
draw_state = def_draw_state ( state );
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_DLN_C

//Skrypt zasadniczej czesci semafora dwukomorowego czerwone + niebiale

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if (  !enabled ||				   				//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 				//blok zajety
	next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_DLN_C_KARZ

//Skrypt semafora dwukomorowego czerwone + niebiale

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if (  !enabled ||				   				//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 				//blok zajety
	next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_GRN_Z

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_GRN_Z_KARZ

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_GRN_P

//Skrypt czesci semfora 2-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_2_GRN_P_KARZ

//Skrypt czesci semfora 2-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////




SCRIPT SEM_3_DLN_40_CP

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + zolte)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  
	!enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 
						

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set(); }
	else
		{prosto = 1;}
	if ( !prosto ||  //w bok na rozjezdzie
		sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
			{ state = SIGASP_APPROACH_1; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_40_CP_KARZ

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + zolte)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
	if ( !prosto ||  //w bok na rozjezdzie
		sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
			{ state = SIGASP_APPROACH_1; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_60_CP

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + zolte)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
	if ( !prosto ||  //w bok na rozjezdzie
		sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
			{ state = SIGASP_APPROACH_1; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_100_CP

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + zolte)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
	if ( !prosto ||  //w bok na rozjezdzie
		sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
			{ state = SIGASP_APPROACH_2; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_P

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_P_KARZ

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_Z

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_Z_KARZ

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_SR_P

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_SR_P_KARZ

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_SR_Z

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_SR_Z_KARZ

//Skrypt czesci semfora 3-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_CB

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + biale)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;

next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
		if ( !prosto || 					//w bok na rozjezdzie
			next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy
				
			{ state = SIGASP_STOP_AND_PROCEED; }
		else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_CB_KARZ

//Skrypt zasadniczej czesci semafora trojkomorowego (czerwone + biale)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
		if ( !prosto || 					//w bok na rozjezdzie
			next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy
				
			{ state = SIGASP_STOP_AND_PROCEED; }
		else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_DLN_C

//Skrypt zasadniczej czesci semafora trojkomorowego zielone + czerwone + pomaranczowe

	extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//float			next_state;
	//float			czy_na_bok;


if (  !enabled ||				   				//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 				//blok zajety
	next_sig_mr( SIGFN_NORMAL ) ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }
else
	{ state = SIGASP_CLEAR_2; }

draw_state = def_draw_state ( state );


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_3_GRN_ZP

//Skrypt czesci semfora SBL informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_4_GRN_P

//Skrypt czesci semfora 4-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_STOP || 
			next_state_norm ==# SIGASP_STOP_AND_PROCEED) //nastepny stop
			{ state = SIGASP_APPROACH_1; }
		else
			{ state = SIGASP_APPROACH_2; }			

	
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_4_GRN_Z

//Skrypt czesci semfora 4-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);


SCRIPT SEM_4_GRN_Zw

//Skrypt czesci semfora 4-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);

SCRIPT SEM_4_GRN_Zn

//Skrypt czesci semfora 4-kom. informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
			
		if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
			{ state = SIGASP_APPROACH_3; }
		else
			{ state = SIGASP_CLEAR_2; }			

	
	}

draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_4_DLN_CB

//Skrypt zasadniczej czesci semafora czterokomorowego (czerwone + biale)

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
			
	if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
		{ prosto = route_set (); }
	else
		{prosto = 1;}
	if ( !prosto ||   				//w bok na rozjezdzie
		next_state ==# SIGASP_RESTRICTING )	//jazda na manewrowy
		
			{ state = SIGASP_STOP_AND_PROCEED; }
			else 
			{ state = SIGASP_CLEAR_2; }
	}
draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_4_GRN_ZP

//Skrypt czesci semafora czterokomorowego informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_5_DLN_40_CPB

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED  || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) ||  //zawsze podajemy sygnal zastepczy
	    next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy	
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


SCRIPT SEM_5_DLN_40_CPBw

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED  || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) ||  //zawsze podajemy sygnal zastepczy
	    next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy	
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


SCRIPT SEM_5_DLN_40_CPBn

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED  || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) ||  //zawsze podajemy sygnal zastepczy
	    next_state ==# SIGASP_RESTRICTING )  //jazda na manewrowy	
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}



///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_5_DLN_60_CPB

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) || 		//zawsze podajemy sygnal zastepczy
		next_state ==# SIGASP_RESTRICTING ) 	//jazda na manewrowy
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}


SCRIPT SEM_5_DLN_60_CPBw

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) || 		//zawsze podajemy sygnal zastepczy
		next_state ==# SIGASP_RESTRICTING ) 	//jazda na manewrowy
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_1; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_5_DLN_100_CPB

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) || 	//zawsze podajemy sygnal zastepczy
		next_state ==# SIGASP_RESTRICTING ) //jazda na manewrowy
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_2; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}

SCRIPT SEM_5_DLN_100_CPBw

//Skrypt zasadniczej czesci semafora z sygnalem zastepczym

	extern float	block_state ();
	extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	extern float	enabled;
	//extern float	this_sig_mr ();
	float			next_state;
	//float		next_state_dist;
	float			prosto;
	


next_state = next_sig_mr ( SIGFN_NORMAL );
if (  !enabled ||				   	//przebieg nieustawiony
	block_state() ==# BLOCK_OCCUPIED || 	//blok zajety
	next_state ==# SIGASP_CLEAR_1 ) 	//reset pokazuje zajetosc bloku 

	{ state = SIGASP_STOP; }

else //podajemy sygnal zezwalajacy na jazde
	{
	if ( sig_feature ( SIGFEAT_USER4 ) || 	//zawsze podajemy sygnal zastepczy
		next_state ==# SIGASP_RESTRICTING ) //jazda na manewrowy
		{ state = SIGASP_STOP_AND_PROCEED; }
		else
			{
			if ( sig_feature ( SIGFEAT_USER1 ) ) //zalezny od zwrotnicy
				{ prosto = route_set (); }
			else
				{prosto = 1;}

			if ( !prosto ||  //w bok na rozjezdzie
			sig_feature ( SIGFEAT_USER2 )  ) //uzytkownik nie zezwala na wiecej 
				{ state = SIGASP_APPROACH_2; }
				
			else 
				{ state = SIGASP_CLEAR_2; }
			}
	if ( !route_set() && sig_feature ( SIGFEAT_USER3 )  ) {state = SIGASP_STOP_AND_PROCEED; }
	}

draw_state = def_draw_state (state);
//ewentualnie podajemy sygnal manewrowy
if ( ( state ==# SIGASP_STOP_AND_PROCEED ) && ( next_state ==# SIGASP_RESTRICTING ) )
	{draw_state = 2;}



///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT SEM_5_GRN_ZP

//Skrypt czesci semafora pieciokomorowego informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);


SCRIPT SEM_5_GRN_ZPw

//Skrypt czesci semafora pieciokomorowego informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);

SCRIPT SEM_5_GRN_ZPn

//Skrypt czesci semafora pieciokomorowego informujacej o nastepnym sygnale

	//extern float	block_state ();
	//extern float	route_set ();
	extern float	next_sig_mr ();
	extern float	def_draw_state ();
	extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	float			next_state_norm;
	float			next_state_dist;
	float			this_signal;

this_signal = this_sig_mr ( SIGFN_NORMAL );
if ( this_signal ==# SIGASP_STOP  || 
	this_signal ==# SIGASP_STOP_AND_PROCEED) // jesli tu jest stop, to nic nie podajemy
	{
	state = SIGASP_STOP;
	}
else
	{
	next_state_norm = next_sig_mr ( SIGFN_NORMAL );
	//czy podac zolte
	if ( next_state_norm ==# SIGASP_STOP || next_state_norm ==# SIGASP_STOP_AND_PROCEED) 
		{ state = SIGASP_APPROACH_1; }
	else
		{ //czy podac zolte migajace
		if ( next_state_norm ==# SIGASP_APPROACH_1 ) 
			{ state = SIGASP_APPROACH_2; 	}	
		else //czy podac zielone migajace
			{
			
			if ( next_state_norm ==# SIGASP_APPROACH_2 ) //nastepny ograniczenie do 100
				{ state = SIGASP_APPROACH_3; }
			else
				{ state = SIGASP_CLEAR_2; }			

			}

		}

	}


draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_100

//Skrypt pasa swietlnego zielonego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_2 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);


SCRIPT PAS_100w

//Skrypt pasa swietlnego zielonego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_2 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_100_P

//Skrypt pasa swietlnego zielonego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_2 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_100_L

//Skrypt pasa swietlnego zielonego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_2 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_60

//Skrypt pasa swietlnego zoltego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);


SCRIPT PAS_60w

//Skrypt pasa swietlnego zoltego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);


///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_60_L

//Skrypt pasa swietlnego zoltego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

SCRIPT PAS_60_P

//Skrypt pasa swietlnego zoltego

	//extern float	block_state ();
	//extern float	route_set ();
	//extern float	next_sig_mr ();
	extern float	def_draw_state ();
	//extern float	sig_feature ();
	extern float	state;
	extern float	draw_state;
	//extern float	enabled;
	extern float	this_sig_mr ();
	//float			next_state;
	//float			next_state_dist;
	//float			this_signal;

if ( this_sig_mr( SIGFN_NORMAL ) ==# SIGASP_APPROACH_1 )  //czy zapalic pas
	{ state = SIGASP_CLEAR_1; }
else
	{
	state = SIGASP_CLEAR_2;
	}

draw_state = def_draw_state (state);

//Wykolejnice
SCRIPT VYKOL

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () ==# 2 )
	draw_state = 0;
	else draw_state = 1;


SCRIPT VYKNAV

	extern float	block_state ();
	extern float	draw_state;

	if ( block_state () ==# 2 )
	draw_state = 0;
	else draw_state = 1;
///////////////////////////////////////////////////////////////////////////////
SCRIPT WNX

	extern float	route_set ();
	extern float	def_draw_state ();
	extern float	state;
	extern float	draw_state;

	state = 7;
	draw_state = 0;

	if ( route_set() )
	{
		draw_state = 1;
		return;
	}

	return;
	





//------------------------------------------------------------
//
// Created by SigMexx V1.4.3
//
// contains following scripts:
//	- Alak_Bejelz
//	- Alak_E11
//	- Alak_E12
//	- Alak_E21
//	- Alak_E22
//	- Alak_F11
//	- Alak_F21
//	- Alak_Kijelz
//	- Alak_MRH_fedezo
//	- Allj_tabla
//	- Be_FELOLDO
//	- Ki_FELOLDO
//	- Elojelzo
//	- Indikator80
//	- Indikator15
//	- Terkoz
//	- 2f_At
//	- 2f_Janus_A
//	- 2f_Janus_B
//	- 3f_Janus_A
//	- 3f_Janus_B
//	- 3F_Max80Hi
//	- 3f_AT_cs
//	- 3f_AT_b_cs
//	- 3F_Max40_Cs
//	- 4f_Max40_cs
//	- 4f_Max40Hi_cs
//	- 0F_INFO
//	- 0F_BeINFO
//	- 0F_BEALLITO
//	- 0F_TH
//	- 0F_VZ
//	- AS
//	- AS2
//	- ASF
//	- ALAK_E
//	- BK_Vr_DB_2Flg_1
//	- BK_Vr_DB_2Flg_2
//	- ALAK_F1
//	- ALAK_F1NB
//	- ALAK_F2A
//	- ALAK_F2B
//	- ALAK_TNB
//	- 0F_FELOLDO
//	- 1F_T
//	- 1F_VT
//	- 1F_H
//	- 2F_TT
//	- 2F_TT_F
//	- 2F_TT_RuF
//	- 2F_TT_Ru
//	- 2F_T
//	- 2F_TNB
//	- 2F_E
//	- 2F_E_Old
//	- 2F_ENB
//	- 2FS
//	- 2FS_NB
//	- 2F
//	- 2F_Old
//	- 3F_Max40Hi_71_kij
//	- 2F_Hi
//	- 3F_AT
//	- 3FK_AT
//	- 3F_IT_A
//	- 3F_IT_B
//	- 3F_FIT
//	- 3F_Max40Hi
//	- 3F_Max40Hi_71_sarga
//	- 3F_Max40
//	- 3F_Max40_Old
//	- 3F_Max40HiT
//	- 3FS_Max40Hi
//	- 3FS_4015
//	- 3FS_Max40
//	- 4F_I
//	- 4F_I_Ru
//	- 4FJelR_ISM
//	- 4F_AT
//	- 4FR_AT
//	- 4F_IT_A
//	- 4F_IT_B
//	- 4F_FIT
//	- 4F_Max40
//	- 4F_Max40_Old
//	- 4F_Max40_T
//	- 4F_Max40Hi
//	- 4F_Max40Hi_Old
//	- 4F_Max40HiVO
//	- 4F_Max40HiVO_Old
//	- 4F_Max40HiT
//	- 2F_T_ru
//	- 2F_Ru
//	- 2F_E_Ru
//	- 3F_Max40Hi_Ru
//	- 4F_Max40HiT_ru
//	- 4F_Max40Hi_K_ru
//	- 4FR_Max40Hi
//	- 4FR_Max40HiT
//	- 4F_Max8040Hi
//	- 4F_Max8040HiT (unused)
//	- 4F_Max8040HiVO
//	- 4F_Max40HiSi
//	- 4F_Max40Si_T
//	- 4F_Max12040Hi
//	- 4F_Max12040HiVO
//	- 4F_Max1208040HiVO
//	- 4F_GYVZ_120
//	- INFO_Max
//	- INFO_120
//	- INFO_80
//	- INFO_40
//	- INFO_SHUNT
//	- INFO_HIVO
//	- VALTO_HM
//	- VALTO_HM_I
//	- VALTO_HM_I2
//	- VS_I
//	- VS
//	- 4F_Max40_KT
//	- 1F_HIVO_TOL
//	- 1F_HIVO
//	- Jelzesadas
//	- Hivasfeloldo
//	- Jelzestovabbitas

//------------------------------------------------------------
SCRIPT Alak_Bejelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			sig_feature(SIGFEAT_NUMBER_PLATE)) ||
			block_state() ==# BLOCK_JN_OBSTRUCTED
		)
			state = SIGASP_STOP;
		else if (block_state() ==# BLOCK_CLEAR)
		{
			draw_state = 1;
			if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
				state = SIGASP_CLEAR_1;
			else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
				state = SIGASP_APPROACH_3;
		}
		else if (block_state() ==# BLOCK_OCCUPIED)
			state = SIGASP_STOP_AND_PROCEED;
	}

//------------------------------------------------------------
SCRIPT Alak_E11

	extern float next_sig_lr();
	extern float draw_state;

	if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E12

	extern float next_sig_lr();
	extern float block_state();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	state = SIGASP_STOP;
	if (!enabled || block_state() !=# BLOCK_CLEAR)
		draw_state = 0;
	else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E21

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float draw_state;

	draw_state = 0;
	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
			draw_state = 1;
		else
			draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT Alak_E22

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
			draw_state = 1;
		else
			draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT Alak_F11

	extern float this_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		if (sig_feature(SIGFEAT_USER4))
			draw_state = 1;
		else
			draw_state = 0;
	}
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			state = SIGASP_CLEAR_1;
		else
			state = SIGASP_APPROACH_3;
	}

//------------------------------------------------------------
SCRIPT Alak_F21

	extern float this_sig_lr();
	extern float draw_state;
	extern float state;
	extern float enabled;

	state = SIGASP_STOP;
	draw_state = 0;
	if (!enabled)
		draw_state = 0;
	else if (this_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_Kijelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if ((sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_APPROACH_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Alak_MRH_fedezo

	extern float route_set();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (!route_set() ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT Allj_tabla

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;

	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (BLOCK_CLEAR !=# block_state())
	{
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_STOP;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Be_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER4))
			state = SIGASP_STOP_AND_PROCEED;
		else if (sig_feature(SIGFEAT_NUMBER_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER3)
	)
		state = SIGASP_APPROACH_3;
	else if (!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2) ||
		!sig_feature(SIGFEAT_USER3)
	)
		state = SIGASP_CLEAR_2;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Ki_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (sig_feature(SIGFEAT_GRADIENT_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		(sig_feature(SIGFEAT_USER3) &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_GRADIENT_PLATE)) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_3;
	else if (!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2) ||
		!sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Elojelzo

	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else
			state = SIGASP_CLEAR_2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Indikator80

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Indikator15

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;
	extern float state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		draw_state = 1;
		state = SIGASP_APPROACH_3;
	}
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Terkoz

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float state;
	extern float enabled;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		next_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP
	)
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2f_At

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 2;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 2;
		}
		else if (draw_state == 2)
			state = SIGASP_STOP_AND_PROCEED;
		else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 0;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 1;
		}
		else if (draw_state == 5)
			state = SIGASP_STOP_AND_PROCEED;
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
			state = SIGASP_STOP_AND_PROCEED;
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max80Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3f_AT_cs

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			draw_state = 4;
			state = SIGASP_CLEAR_2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else
			draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 3f_AT_b_cs

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 2;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) == SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40_Cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4f_Max40_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else
			draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP &&
			block_state() !=# BLOCK_CLEAR
		)
			state = SIGASP_STOP;
		else
			state = SIGASP_RESTRICTING;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4f_Max40Hi_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else
			draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 9;
	}

//------------------------------------------------------------
SCRIPT 0F_INFO

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!sig_feature(SIGFEAT_USER4)
	)
		state = SIGASP_CLEAR_1;
	else if (sig_feature(SIGFEAT_USER4))
		state = next_sig_lr(SIGFN_DISTANCE);
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BeINFO

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		state = next_sig_lr(SIGFN_DISTANCE);
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BEALLITO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else
	{
		draw_state = 0;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
			sig_feature(SIGFEAT_USER3)
		)
			state = SIGASP_RESTRICTING;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE))
				state = SIGASP_STOP;
			else
				state = SIGASP_CLEAR_2;
		}
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			(route_set() &&
			(!sig_feature(SIGFEAT_USER1) &&
			!sig_feature(SIGFEAT_USER2))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1
		)
			state = SIGASP_CLEAR_1;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
			sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = SIGASP_APPROACH_2;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			sig_feature(SIGFEAT_USER2) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER2)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			state = SIGASP_APPROACH_3;
		else
			state = SIGASP_CLEAR_2;
	}

//------------------------------------------------------------
SCRIPT 0F_TH

	extern float next_sig_lr();
	extern float sig_feature();
	extern float opp_sig_lr();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else
	{
		draw_state = 0;
		if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			(sig_feature(SIGFEAT_USER3) &&
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		)
			state = SIGASP_STOP;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE))
				state = SIGASP_STOP;
			else
				state = SIGASP_CLEAR_1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
			state = SIGASP_CLEAR_1;
	}

//------------------------------------------------------------
SCRIPT 0F_VZ

	extern float state;

	state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT AS

	extern float draw_state;

	draw_state = 1;

//------------------------------------------------------------
SCRIPT AS2

	extern float draw_state;
	extern float enabled;

	if (enabled)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT ASF

	extern float draw_state;

	draw_state = 0;

//------------------------------------------------------------
SCRIPT ALAK_E

	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 1;
	}
	else if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_1

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_2

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1NB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F2A

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_F2B

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 0;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 0F_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (sig_feature(SIGFEAT_GRADIENT_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		(sig_feature(SIGFEAT_USER3) &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_GRADIENT_PLATE)) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_3;
	else if (sig_feature(SIGFEAT_USER3))
		state = SIGASP_CLEAR_2;
	else if (!sig_feature(SIGFEAT_USER1) && !sig_feature(SIGFEAT_USER2))
		state = SIGASP_CLEAR_1;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 1F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 1F_VT

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 1F_H

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F_TT

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_F

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_RuF

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_STOP_AND_PROCEED;
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_E

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 4;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	)
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 2F_E_Old

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 4;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	)
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 2F_ENB

	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 2FS

	extern float next_sig_lr();
	extern float sig_feature();
	extern float block_state();
	extern float this_sig_lr();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2FS_NB

	extern float next_sig_lr();
	extern float sig_feature();
	extern float block_state();
	extern float this_sig_lr();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_kij

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			draw_state = 2;
		else if (sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3
		)
			draw_state = 1;
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT 2F_Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3FK_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			draw_state = 4;
			state = SIGASP_CLEAR_2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 2;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) == SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 4;
		else
			draw_state = 5;
	}

//------------------------------------------------------------
SCRIPT 3F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (state == SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 5;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_sarga

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float this_state;
	float has_gradient_plate;

	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 8;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 8;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 7;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 7;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 8;
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 1;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 5;
	}
	else if (sig_feature(SIGFEAT_USER1) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (sig_feature(SIGFEAT_USER3))
		state = SIGASP_CLEAR_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_Max40Hi

	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float block_state();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_4015

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_Max40

	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_I

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_I_Ru

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4FJelR_ISM

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 4FR_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 4F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else
				draw_state = 4;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_IT_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 4;
			else
				draw_state = 5;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (state == SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 5;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else
				draw_state = 4;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_RESTRICTING;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_RESTRICTING;
			draw_state = 2;
		}
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi

	extern float next_sig_lr();
	extern float block_state();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40Hi_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 2F_T_ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_Ru

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_E_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if ((sig_feature(SIGFEAT_USER4) &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((sig_feature(SIGFEAT_USER4) &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((sig_feature(SIGFEAT_USER4) &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_CLEAR_1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiT_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi_K_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4FR_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4FR_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max8040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max8040HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max8040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiSi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Si_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max12040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 12;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 16;
		else
			draw_state = 15;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 11;
		else
			draw_state = 10;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP &&
			block_state() !=# BLOCK_CLEAR
		)
			state = SIGASP_STOP;
		else
			state = SIGASP_RESTRICTING;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max12040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 12;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 16;
		else
			draw_state = 15;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 11;
		else
			draw_state = 10;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max1208040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 15;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 17;
		else
			draw_state = 16;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 12;
		else
			draw_state = 11;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 18;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 19;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 20;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 22;
		else
			draw_state = 21;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 7;
		else
			draw_state = 6;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_GYVZ_120

	extern float block_state();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float next_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 0;
		}
	}
	else
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT INFO_Max

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_1;

//------------------------------------------------------------
SCRIPT INFO_120

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_1;

//------------------------------------------------------------
SCRIPT INFO_80

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_2;

//------------------------------------------------------------
SCRIPT INFO_40

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_3;

//------------------------------------------------------------
SCRIPT INFO_SHUNT

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;
	extern float draw_state;

	draw_state = 0;
	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT INFO_HIVO

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT VALTO_HM

	extern float route_set();
	extern float draw_state;
	extern float state;

	if (route_set())
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I2

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VS_I

	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else
		state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT VS

	extern float next_sig_lr();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	return;

//------------------------------------------------------------
SCRIPT 4F_Max40_KT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 1F_HIVO_TOL

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		this_sig_lr(SIGFN_REPEATER) !=# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		draw_state = 2;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 1F_HIVO

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Jelzesadas

	extern float this_sig_lr();
	extern float sig_feature();
	extern float route_set();
	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING)
	)
		state = SIGASP_CLEAR_1;
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING)
	)
		state = SIGASP_APPROACH_3;
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Hivasfeloldo

	extern float next_sig_lr();
	extern float block_state();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		draw_state = 0;
		if (block_state() ==# SIGASP_STOP)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = next_sig_lr(SIGFN_NORMAL);
				if (route_set())
					draw_state = 1;
			}
			else
				state = SIGASP_CLEAR_2;
		}
	}

//------------------------------------------------------------
SCRIPT Jelzestovabbitas

	extern float sig_feature();
	extern float next_sig_lr();
	extern float state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
		state = next_sig_lr(SIGFN_NORMAL);
	else
		state = next_sig_lr(SIGFN_DISTANCE);

//------------------------------------------------------------
//
// Created by SigMexx V1.4.3
//
// contains following scripts:
//	- Alak_Bejelz
//	- Alak_E11
//	- Alak_E12
//	- Alak_E21
//	- Alak_E22
//	- Alak_F11
//	- Alak_F21
//	- Alak_Kijelz
//	- Alak_MRH_fedezo
//	- Allj_tabla
//	- Be_FELOLDO
//	- Ki_FELOLDO
//	- Elojelzo
//	- Indikator80
//	- Indikator15
//	- Terkoz
//	- 2f_At
//	- 2f_Janus_A
//	- 2f_Janus_B
//	- 3f_Janus_A
//	- 3f_Janus_B
//	- 3F_Max80Hi
//	- 3f_AT_cs
//	- 3f_AT_b_cs
//	- 3F_Max40_Cs
//	- 4f_Max40_cs
//	- 4f_Max40Hi_cs
//	- 0F_INFO
//	- 0F_BeINFO
//	- 0F_BEALLITO
//	- 0F_TH
//	- 0F_VZ
//	- AS
//	- AS2
//	- ASF
//	- ALAK_E
//	- BK_Vr_DB_2Flg_1
//	- BK_Vr_DB_2Flg_2
//	- ALAK_F1
//	- ALAK_F1NB
//	- ALAK_F2A
//	- ALAK_F2B
//	- ALAK_TNB
//	- 0F_FELOLDO
//	- 1F_T
//	- 1F_VT
//	- 1F_H
//	- 2F_TT
//	- 2F_TT_F
//	- 2F_TT_RuF
//	- 2F_TT_Ru
//	- 2F_T
//	- 2F_TNB
//	- 2F_E
//	- 2F_E_Old
//	- 2F_ENB
//	- 2FS
//	- 2FS_NB
//	- 2F
//	- 2F_Old
//	- 3F_Max40Hi_71_kij
//	- 2F_Hi
//	- 3F_AT
//	- 3FK_AT
//	- 3F_IT_A
//	- 3F_IT_B
//	- 3F_FIT
//	- 3F_Max40Hi
//	- 3F_Max40Hi_71_sarga
//	- 3F_Max40
//	- 3F_Max40_Old
//	- 3F_Max40HiT
//	- 3FS_Max40Hi
//	- 3FS_4015
//	- 3FS_Max40
//	- 4F_I
//	- 4F_I_Ru
//	- 4FJelR_ISM
//	- 4F_AT
//	- 4FR_AT
//	- 4F_IT_A
//	- 4F_IT_B
//	- 4F_FIT
//	- 4F_Max40
//	- 4F_Max40_Old
//	- 4F_Max40_T
//	- 4F_Max40Hi
//	- 4F_Max40Hi_Old
//	- 4F_Max40HiVO
//	- 4F_Max40HiVO_Old
//	- 4F_Max40HiT
//	- 2F_T_ru
//	- 2F_Ru
//	- 2F_E_Ru
//	- 3F_Max40Hi_Ru
//	- 4F_Max40HiT_ru
//	- 4F_Max40Hi_K_ru
//	- 4FR_Max40Hi
//	- 4FR_Max40HiT
//	- 4F_Max8040Hi
//	- 4F_Max8040HiT (unused)
//	- 4F_Max8040HiVO
//	- 4F_Max40HiSi
//	- 4F_Max40Si_T
//	- 4F_Max12040Hi
//	- 4F_Max12040HiVO
//	- 4F_Max1208040HiVO
//	- 4F_GYVZ_120
//	- INFO_Max
//	- INFO_120
//	- INFO_80
//	- INFO_40
//	- INFO_SHUNT
//	- INFO_HIVO
//	- VALTO_HM
//	- VALTO_HM_I
//	- VALTO_HM_I2
//	- VS_I
//	- VS
//	- 4F_Max40_KT
//	- 1F_HIVO_TOL
//	- 1F_HIVO
//	- Jelzesadas
//	- Hivasfeloldo
//	- Jelzestovabbitas

//------------------------------------------------------------
SCRIPT Alak_Bejelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (enabled)
	{
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
			sig_feature(SIGFEAT_NUMBER_PLATE)) ||
			block_state() ==# BLOCK_JN_OBSTRUCTED
		)
			state = SIGASP_STOP;
		else if (block_state() ==# BLOCK_CLEAR)
		{
			draw_state = 1;
			if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
				state = SIGASP_CLEAR_1;
			else if (sig_feature(SIGFEAT_USER1) || sig_feature(SIGFEAT_USER2))
				state = SIGASP_APPROACH_3;
		}
		else if (block_state() ==# BLOCK_OCCUPIED)
			state = SIGASP_STOP_AND_PROCEED;
	}

//------------------------------------------------------------
SCRIPT Alak_E11

	extern float next_sig_lr();
	extern float draw_state;

	if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E12

	extern float next_sig_lr();
	extern float block_state();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	state = SIGASP_STOP;
	if (!enabled || block_state() !=# BLOCK_CLEAR)
		draw_state = 0;
	else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_E21

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float draw_state;

	draw_state = 0;
	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
			draw_state = 1;
		else
			draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT Alak_E22

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
			draw_state = 1;
		else
			draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT Alak_F11

	extern float this_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		if (sig_feature(SIGFEAT_USER4))
			draw_state = 1;
		else
			draw_state = 0;
	}
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			this_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			state = SIGASP_CLEAR_1;
		else
			state = SIGASP_APPROACH_3;
	}

//------------------------------------------------------------
SCRIPT Alak_F21

	extern float this_sig_lr();
	extern float draw_state;
	extern float state;
	extern float enabled;

	state = SIGASP_STOP;
	draw_state = 0;
	if (!enabled)
		draw_state = 0;
	else if (this_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Alak_Kijelz

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if ((sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_APPROACH_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Alak_MRH_fedezo

	extern float route_set();
	extern float next_sig_lr();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (!route_set() ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT Allj_tabla

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;

	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (BLOCK_CLEAR !=# block_state())
	{
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_STOP;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Be_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else if (block_state() !=# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER4))
			state = SIGASP_STOP_AND_PROCEED;
		else if (sig_feature(SIGFEAT_NUMBER_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER3)
	)
		state = SIGASP_APPROACH_3;
	else if (!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2) ||
		!sig_feature(SIGFEAT_USER3)
	)
		state = SIGASP_CLEAR_2;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		state = SIGASP_CLEAR_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Ki_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (sig_feature(SIGFEAT_GRADIENT_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		(sig_feature(SIGFEAT_USER3) &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_GRADIENT_PLATE)) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_3;
	else if (!sig_feature(SIGFEAT_USER1) ||
		!sig_feature(SIGFEAT_USER2) ||
		!sig_feature(SIGFEAT_USER3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Elojelzo

	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else
			state = SIGASP_CLEAR_2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Indikator80

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Indikator15

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float draw_state;
	extern float state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		draw_state = 1;
		state = SIGASP_APPROACH_3;
	}
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Terkoz

	extern float block_state();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float state;
	extern float enabled;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		next_sig_lr(SIGFN_NORMAL) !=# SIGASP_STOP
	)
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2f_At

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 2;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 2;
		}
		else if (draw_state == 2)
			state = SIGASP_STOP_AND_PROCEED;
		else if (next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 0;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 2;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 1;
		}
		else if (draw_state == 5)
			state = SIGASP_STOP_AND_PROCEED;
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3f_Janus_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
			state = SIGASP_STOP_AND_PROCEED;
		else if (draw_state == 1)
			state = SIGASP_CLEAR_2;
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max80Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3f_AT_cs

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			draw_state = 4;
			state = SIGASP_CLEAR_2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else
			draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 3f_AT_b_cs

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 2;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) == SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40_Cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4f_Max40_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else
			draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP &&
			block_state() !=# BLOCK_CLEAR
		)
			state = SIGASP_STOP;
		else
			state = SIGASP_RESTRICTING;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4f_Max40Hi_cs

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else
			draw_state = 2;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 9;
	}

//------------------------------------------------------------
SCRIPT 0F_INFO

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		!sig_feature(SIGFEAT_USER4)
	)
		state = SIGASP_CLEAR_1;
	else if (sig_feature(SIGFEAT_USER4))
		state = next_sig_lr(SIGFN_DISTANCE);
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BeINFO

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		state = next_sig_lr(SIGFN_DISTANCE);
	else
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 0F_BEALLITO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else
	{
		draw_state = 0;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
			sig_feature(SIGFEAT_USER3)
		)
			state = SIGASP_RESTRICTING;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
			state = SIGASP_STOP_AND_PROCEED;
		else if (block_state() !=# BLOCK_CLEAR)
			state = SIGASP_STOP;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE))
				state = SIGASP_STOP;
			else
				state = SIGASP_CLEAR_2;
		}
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			(route_set() &&
			(!sig_feature(SIGFEAT_USER1) &&
			!sig_feature(SIGFEAT_USER2))) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1
		)
			state = SIGASP_CLEAR_1;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
			sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = SIGASP_APPROACH_2;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			sig_feature(SIGFEAT_USER2) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER2)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			state = SIGASP_APPROACH_3;
		else
			state = SIGASP_CLEAR_2;
	}

//------------------------------------------------------------
SCRIPT 0F_TH

	extern float next_sig_lr();
	extern float sig_feature();
	extern float opp_sig_lr();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		state = SIGASP_STOP;
	}
	else
	{
		draw_state = 0;
		if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			(sig_feature(SIGFEAT_USER3) &&
			opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		)
			state = SIGASP_STOP;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE))
				state = SIGASP_STOP;
			else
				state = SIGASP_CLEAR_1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
			state = SIGASP_CLEAR_1;
	}

//------------------------------------------------------------
SCRIPT 0F_VZ

	extern float state;

	state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT AS

	extern float draw_state;

	draw_state = 1;

//------------------------------------------------------------
SCRIPT AS2

	extern float draw_state;
	extern float enabled;

	if (enabled)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT ASF

	extern float draw_state;

	draw_state = 0;

//------------------------------------------------------------
SCRIPT ALAK_E

	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 1;
	}
	else if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_1

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT BK_Vr_DB_2Flg_2

	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float has_number_plate;
	float has_gradient_plate;
	float next_state;
	float this_state;

	has_number_plate = sig_feature(SIGFEAT_NUMBER_PLATE);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_NORMAL);
	if (next_state ==# SIGASP_STOP ||
		next_state ==# SIGASP_STOP_AND_PROCEED ||
		next_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (next_state ==# SIGASP_APPROACH_1)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_2)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else if (next_state ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		!sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_F1NB

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (block_state() !=# BLOCK_CLEAR ||
		!enabled ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))
	)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING) ||
		sig_feature(SIGFEAT_USER3) ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
	{
		draw_state = 1;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			!sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			state = SIGASP_CLEAR_1;
		else if (sig_feature(SIGFEAT_USER1) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			sig_feature(SIGFEAT_USER2)
		)
			state = SIGASP_APPROACH_3;
		else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT ALAK_F2A

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_F2B

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float next_state;
	float this_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	this_state = this_sig_lr(SIGFN_INFO);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_2;
			draw_state = 0;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT ALAK_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER1))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 0F_FELOLDO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
	{
		if (sig_feature(SIGFEAT_GRADIENT_PLATE))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		(sig_feature(SIGFEAT_USER3) &&
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
	)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		sig_feature(SIGFEAT_NUMBER_PLATE))
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_GRADIENT_PLATE)) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1)
		state = SIGASP_CLEAR_1;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		sig_feature(SIGFEAT_USER1)
	)
		state = SIGASP_APPROACH_2;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)
	)
		state = SIGASP_APPROACH_3;
	else if (sig_feature(SIGFEAT_USER3))
		state = SIGASP_CLEAR_2;
	else if (!sig_feature(SIGFEAT_USER1) && !sig_feature(SIGFEAT_USER2))
		state = SIGASP_CLEAR_1;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 1F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 1F_VT

	extern float next_sig_lr();
	extern float state;
	extern float draw_state;

	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	else
	{
		state = next_sig_lr(SIGFN_NORMAL);
		draw_state = 0;
	}

//------------------------------------------------------------
SCRIPT 1F_H

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F_TT

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_F

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_RESTRICTING;
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_RuF

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TT_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_T

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_TNB

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
			state = SIGASP_STOP_AND_PROCEED;
		else
			state = SIGASP_STOP;
	}
	else if (sig_feature(SIGFEAT_USER1) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			state = next_sig_lr(SIGFN_NORMAL);
		else
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_E

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 4;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	)
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 2F_E_Old

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;
	if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 4;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	)
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 2F_ENB

	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 2FS

	extern float next_sig_lr();
	extern float sig_feature();
	extern float block_state();
	extern float this_sig_lr();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2FS_NB

	extern float next_sig_lr();
	extern float sig_feature();
	extern float block_state();
	extern float this_sig_lr();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 2F

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_kij

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float opp_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
		opp_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
	)
		state = SIGASP_STOP_AND_PROCEED;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else
	{
		state = SIGASP_CLEAR_2;
		if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
			(route_set() &&
			!sig_feature(SIGFEAT_USER1))
		)
			draw_state = 2;
		else if (sig_feature(SIGFEAT_USER1) ||
			(route_set() &&
			sig_feature(SIGFEAT_USER1)) ||
			this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3
		)
			draw_state = 1;
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
	}

//------------------------------------------------------------
SCRIPT 2F_Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3FK_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			draw_state = 4;
			state = SIGASP_CLEAR_2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_IT_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 2;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) == SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 3;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 4;
		else
			draw_state = 5;
	}

//------------------------------------------------------------
SCRIPT 3F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (state == SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 5;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4)) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_71_sarga

	extern float block_state();
	extern float route_set();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;
	float this_state;
	float has_gradient_plate;

	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (!enabled || block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (route_set())
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			state = SIGASP_STOP;
			draw_state = 0;
		}
		else if (sig_feature(SIGFEAT_USER1))
		{
			if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
				sig_feature(SIGFEAT_USER4))
			{
				if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 8;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
					next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
				{
					state = SIGASP_APPROACH_3;
					if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
						draw_state = 7;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
						draw_state = 8;
					else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
						draw_state = 8;
					else
					{
						state = SIGASP_STOP_AND_PROCEED;
						draw_state = 1;
					}
				}
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 7;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 7;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 8;
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 8;
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_1 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_CLEAR_2 && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_CLEAR_1;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 4;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 6;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3)
					draw_state = 5;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_RESTRICTING)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
					draw_state = 3;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP)
					draw_state = 3;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 6;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 3;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_APPROACH_3 &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (this_state ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (this_state ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER2) && block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
			sig_feature(SIGFEAT_USER4))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
			{
				state = SIGASP_APPROACH_3;
				if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_2)
					draw_state = 7;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
					draw_state = 8;
				else if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2)
					draw_state = 8;
				else
				{
					state = SIGASP_STOP_AND_PROCEED;
					draw_state = 1;
				}
			}
			else
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 1;
			}
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 7;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 8;
		}
		else
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 1;
		}
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if (block_state() !=# BLOCK_CLEAR)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 3F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED) &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 1;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 5;
	}
	else if (sig_feature(SIGFEAT_USER1) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (sig_feature(SIGFEAT_USER3))
		state = SIGASP_CLEAR_2;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1) ||
			(!sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_Max40Hi

	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float block_state();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_4015

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 2;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 3FS_Max40

	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		(sig_feature(SIGFEAT_NUMBER_PLATE) ||
		sig_feature(SIGFEAT_USER4))) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 5;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_I

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_I_Ru

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4FJelR_ISM

	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING
		)
			draw_state = 1;
		else
			draw_state = 0;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_REPEATER) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 2;
	}
	else
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
			next_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1
		)
			draw_state = 0;
		else
			draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT 4F_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 4FR_AT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_CLEAR_2;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		state = SIGASP_CLEAR_1;
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 1;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
			draw_state = 2;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			draw_state = 3;
		else
			draw_state = 4;
	}

//------------------------------------------------------------
SCRIPT 4F_IT_A

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (draw_state == 5)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			if (state == SIGASP_STOP)
			{
				state = SIGASP_APPROACH_3;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 2;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else
				draw_state = 4;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_IT_B

	extern float next_sig_lr();
	extern float block_state();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_STOP_AND_PROCEED || state ==# SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 0;
			}
			else if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 1;
			}
			else if (state == SIGASP_STOP)
				draw_state = 1;
		}
		else if (draw_state == 0)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 0;
		}
		else if (draw_state == 1)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 3;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 5;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 2;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 3;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 4;
			else
				draw_state = 5;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_FIT

	extern float block_state();
	extern float next_sig_lr();
	extern float enabled;
	extern float state;
	extern float draw_state;

	if (!enabled)
	{
		if (block_state() !=# BLOCK_CLEAR)
		{
			if (state == SIGASP_CLEAR_1)
			{
				state = SIGASP_STOP;
				draw_state = 0;
			}
			else if (state == SIGASP_STOP)
				draw_state = 0;
			else if (state == SIGASP_CLEAR_2)
			{
				state = SIGASP_STOP_AND_PROCEED;
				draw_state = 5;
			}
			else if (state == SIGASP_STOP_AND_PROCEED)
				draw_state = 5;
		}
		else if (state == SIGASP_STOP_AND_PROCEED ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED
		)
			draw_state = 5;
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
		{
			state = SIGASP_STOP_AND_PROCEED;
			draw_state = 5;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2)
		{
			state = SIGASP_CLEAR_2;
			draw_state = 4;
		}
	}
	else if (block_state() ==# BLOCK_CLEAR)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		{
			state = SIGASP_APPROACH_3;
			draw_state = 1;
		}
		else
		{
			state = SIGASP_CLEAR_1;
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
				draw_state = 2;
			else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
				draw_state = 3;
			else
				draw_state = 4;
		}
	}

//------------------------------------------------------------
SCRIPT 4F_Max40

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		{
			state = SIGASP_RESTRICTING;
			draw_state = 2;
		}
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
		{
			state = SIGASP_RESTRICTING;
			draw_state = 2;
		}
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi

	extern float next_sig_lr();
	extern float block_state();
	extern float this_sig_lr();
	extern float sig_feature();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 4F_Max40Hi_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiVO_Old

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 3;
	}

//------------------------------------------------------------
SCRIPT 2F_T_ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	draw_state = 0;
	if (!enabled)
	{
		draw_state = 0;
		if (sig_feature(SIGFEAT_USER1))
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
			)
				state = SIGASP_STOP;
			else
				state = SIGASP_RESTRICTING;
		}
		else
			state = SIGASP_STOP;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		block_state() ==# BLOCK_CLEAR)
	{
		if (sig_feature(SIGFEAT_USER1))
		{
			state = SIGASP_RESTRICTING;
			draw_state = 1;
		}
		else
			state = SIGASP_CLEAR_2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() ==# BLOCK_CLEAR)
		state = next_sig_lr(SIGFN_NORMAL);

//------------------------------------------------------------
SCRIPT 2F_Ru

	extern float this_sig_lr();
	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		route_set() ||
		sig_feature(SIGFEAT_USER2)) &&
		!sig_feature(SIGFEAT_USER3)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_CLEAR_2;
		draw_state = 1;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 2F_E_Ru

	extern float next_sig_lr();
	extern float block_state();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	extern float enabled;

	if (!enabled)
		state = SIGASP_CLEAR_2;
	else if (block_state() !=# SIGASP_STOP)
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_2;
	if ((sig_feature(SIGFEAT_USER4) &&
		(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	)
		draw_state = 0;
	else if ((sig_feature(SIGFEAT_USER4) &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if ((sig_feature(SIGFEAT_USER4) &&
		next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
	)
		draw_state = 2;
	else
		draw_state = 3;

//------------------------------------------------------------
SCRIPT 3F_Max40Hi_Ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_CLEAR_1;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 7;
		else
			draw_state = 5;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiT_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Hi_K_ru

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4FR_Max40Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4FR_Max40HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max8040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max8040HiT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		(block_state() !=# BLOCK_JN_OBSTRUCTED))
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT 4F_Max8040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1)))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if (block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2 ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40HiSi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_RESTRICTING;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max40Si_T

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING ||
		this_sig_lr(SIGFN_INFO) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_RESTRICTING;
		draw_state = 2;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 3;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3)
	{
		state = SIGASP_APPROACH_3;
		draw_state = 4;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max12040Hi

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 12;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 16;
		else
			draw_state = 15;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 11;
		else
			draw_state = 10;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else if (sig_feature(SIGFEAT_USER3))
	{
		if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP &&
			block_state() !=# BLOCK_CLEAR
		)
			state = SIGASP_STOP;
		else
			state = SIGASP_RESTRICTING;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max12040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 12;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 16;
		else
			draw_state = 15;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 7;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 11;
		else
			draw_state = 10;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else
			draw_state = 6;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_Max1208040HiVO

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_STOP_AND_PROCEED)
	{
		state = SIGASP_STOP_AND_PROCEED;
		draw_state = 1;
	}
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 13;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 14;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 15;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 17;
		else
			draw_state = 16;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_1 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 8;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 12;
		else
			draw_state = 11;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_2) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_2;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 18;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 19;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 20;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 22;
		else
			draw_state = 21;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			(next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_STOP_AND_PROCEED)) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		)
			draw_state = 3;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3
		)
			draw_state = 4;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1) ||
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_1
		)
			draw_state = 7;
		else
			draw_state = 6;
	}
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 4F_GYVZ_120

	extern float block_state();
	extern float next_sig_lr();
	extern float sig_feature();
	extern float state;
	extern float draw_state;
	float next_state;
	float has_gradient_plate;

	next_state = next_sig_lr(SIGFN_NORMAL);
	has_gradient_plate = sig_feature(SIGFEAT_GRADIENT_PLATE);
	if (block_state() !=# BLOCK_CLEAR ||
		block_state() ==# BLOCK_JN_OBSTRUCTED)
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1)
	{
		if (next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_1)
		{
			state = SIGASP_CLEAR_1;
			draw_state = 0;
		}
	}
	else
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}

//------------------------------------------------------------
SCRIPT INFO_Max

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_CLEAR_1;

//------------------------------------------------------------
SCRIPT INFO_120

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_1;

//------------------------------------------------------------
SCRIPT INFO_80

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_2;

//------------------------------------------------------------
SCRIPT INFO_40

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_APPROACH_3;

//------------------------------------------------------------
SCRIPT INFO_SHUNT

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;
	extern float draw_state;

	draw_state = 0;
	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT INFO_HIVO

	extern float block_state();
	extern float route_set();
	extern float state;
	extern float enabled;

	if (!enabled || block_state() !=# BLOCK_CLEAR || !route_set())
		state = SIGASP_STOP;
	else
		state = SIGASP_STOP_AND_PROCEED;

//------------------------------------------------------------
SCRIPT VALTO_HM

	extern float route_set();
	extern float draw_state;
	extern float state;

	if (route_set())
	{
		state = SIGASP_CLEAR_1;
		draw_state = 1;
	}
	else
	{
		state = SIGASP_CLEAR_2;
		draw_state = 0;
	}
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VALTO_HM_I2

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_REPEATER) ==# SIGASP_CLEAR_1)
		draw_state = 1;
	else
		draw_state = 0;
	return;

//------------------------------------------------------------
SCRIPT VS_I

	extern float draw_state;
	extern float state;
	extern float enabled;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else
		state = SIGASP_RESTRICTING;

//------------------------------------------------------------
SCRIPT VS

	extern float next_sig_lr();
	extern float sig_feature();
	extern float enabled;
	extern float draw_state;
	extern float state;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else if (sig_feature(SIGFEAT_NUMBER_PLATE) &&
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		state = SIGASP_RESTRICTING;
		draw_state = 1;
	}
	return;

//------------------------------------------------------------
SCRIPT 4F_Max40_KT

	extern float block_state();
	extern float sig_feature();
	extern float next_sig_lr();
	extern float this_sig_lr();
	extern float route_set();
	extern float enabled;
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if (!enabled)
		state = SIGASP_STOP;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING ||
		next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING) &&
		block_state() !=# BLOCK_JN_OBSTRUCTED)
	{
		if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
			state = SIGASP_RESTRICTING;
		else if (next_sig_lr(SIGFN_SHUNTING) ==# SIGASP_RESTRICTING &&
			next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP
		)
			state = SIGASP_RESTRICTING;
	}
	else if (this_sig_lr(SIGFN_INFO) ==# SIGASP_STOP_AND_PROCEED)
		state = SIGASP_STOP_AND_PROCEED;
	else if ((next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP &&
		sig_feature(SIGFEAT_NUMBER_PLATE)) ||
		block_state() ==# BLOCK_JN_OBSTRUCTED
	)
		state = SIGASP_STOP;
	else if (block_state() !=# BLOCK_CLEAR)
		state = SIGASP_STOP;
	else if (sig_feature(SIGFEAT_GRADIENT_PLATE) &&
		(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP ||
		next_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED))
	{
		state = SIGASP_APPROACH_3;
		draw_state = 3;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_CLEAR_1;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 10;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 9;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 8;
		else
			draw_state = 7;
	}
	else if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1) ||
		(route_set() &&
		sig_feature(SIGFEAT_USER1)) ||
		sig_feature(SIGFEAT_USER2)) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING))
	{
		if (sig_feature(SIGFEAT_USER2))
			state = SIGASP_CLEAR_2;
		else
			state = SIGASP_APPROACH_3;
		if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_CLEAR_1) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 6;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_2) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 5;
		else if ((sig_feature(SIGFEAT_USER4) &&
			next_sig_lr(SIGFN_DISTANCE) ==# SIGASP_APPROACH_3) ||
			(next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 &&
			!sig_feature(SIGFEAT_USER4))
		)
			draw_state = 4;
		else
			draw_state = 3;
	}
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT 1F_HIVO_TOL

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED &&
		this_sig_lr(SIGFN_REPEATER) !=# SIGASP_APPROACH_3
	)
		draw_state = 1;
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		draw_state = 2;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT 1F_HIVO

	extern float this_sig_lr();
	extern float draw_state;

	if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_STOP_AND_PROCEED)
		draw_state = 1;
	else
		draw_state = 0;

//------------------------------------------------------------
SCRIPT Jelzesadas

	extern float this_sig_lr();
	extern float sig_feature();
	extern float route_set();
	extern float next_sig_lr();
	extern float block_state();
	extern float state;
	extern float draw_state;

	draw_state = 0;
	if ((this_sig_lr(SIGFN_INFO) ==# SIGASP_CLEAR_1 ||
		(route_set() &&
		!sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING)
	)
		state = SIGASP_CLEAR_1;
	else if ((block_state() ==# BLOCK_CLEAR &&
		(this_sig_lr(SIGFN_INFO) ==# SIGASP_APPROACH_3 ||
		sig_feature(SIGFEAT_USER1))) &&
		(next_sig_lr(SIGFN_NORMAL) !=# SIGASP_RESTRICTING &&
		next_sig_lr(SIGFN_SHUNTING) !=# SIGASP_RESTRICTING)
	)
		state = SIGASP_APPROACH_3;
	else if (this_sig_lr(SIGFN_NORMAL) ==# SIGASP_RESTRICTING)
		state = SIGASP_RESTRICTING;
	else
		state = SIGASP_CLEAR_2;

//------------------------------------------------------------
SCRIPT Hivasfeloldo

	extern float next_sig_lr();
	extern float block_state();
	extern float route_set();
	extern float draw_state;
	extern float enabled;
	extern float state;

	if (!enabled)
	{
		state = SIGASP_STOP;
		draw_state = 0;
	}
	else
	{
		draw_state = 0;
		if (block_state() ==# SIGASP_STOP)
		{
			if (next_sig_lr(SIGFN_NORMAL) ==# SIGASP_CLEAR_1 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_3 ||
				next_sig_lr(SIGFN_NORMAL) ==# SIGASP_APPROACH_2)
			{
				state = next_sig_lr(SIGFN_NORMAL);
				if (route_set())
					draw_state = 1;
			}
			else
				state = SIGASP_CLEAR_2;
		}
	}

//------------------------------------------------------------
SCRIPT Jelzestovabbitas

	extern float sig_feature();
	extern float next_sig_lr();
	extern float state;

	if (sig_feature(SIGFEAT_NUMBER_PLATE))
		state = next_sig_lr(SIGFN_NORMAL);
	else
		state = next_sig_lr(SIGFN_DISTANCE);


// End of File


>>>>>>> aa9fcfe6af53b9166b4bd880120af5658c10ce12
